/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ChatItem;
import com.konfigthis.client.model.ChatMessageProperties;
import com.konfigthis.client.model.ChatNullable;
import com.konfigthis.client.model.ChatQuestion;
import com.konfigthis.client.model.ChatUpdatableProperties;
import com.konfigthis.client.model.CreateChatProperties;
import com.konfigthis.client.model.QuestionAndAnswer;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChatApi
 */
@Disabled
public class ChatApiTest {

    private static ChatApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ChatApi(apiClient);
    }

    /**
     * Add Question And Answer Handler
     *
     * Add a new question and anwser to the chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addQuestionAndAnswerTest() throws ApiException {
        String question = null;
        String answer = null;
        UUID chatId = null;
        ChatNullable response = api.addQuestionAndAnswer(question, answer, chatId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Chat Handler
     *
     * Create a new chat with initial chat messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHandlerTest() throws ApiException {
        String name = null;
        Object response = api.createHandler(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Stream Question Handler
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamQuestionHandlerTest() throws ApiException {
        String question = null;
        UUID chatId = null;
        String model = null;
        Double temperature = null;
        Integer maxTokens = null;
        UUID brainId = null;
        UUID promptId = null;
        UUID brainId = null;
        Object response = api.createStreamQuestionHandler(question, chatId)
                .model(model)
                .temperature(temperature)
                .maxTokens(maxTokens)
                .brainId(brainId)
                .promptId(promptId)
                .brainId(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Chat
     *
     * Delete a specific chat by chat ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChatByIdTest() throws ApiException {
        UUID chatId = null;
        Object response = api.deleteChatById(chatId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Chats
     *
     * Retrieve all chats for the current user.  - &#x60;current_user&#x60;: The current authenticated user. - Returns a list of all chats for the user.  This endpoint retrieves all the chats associated with the current authenticated user. It returns a list of chat objects containing the chat ID and chat name for each chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllChatsTest() throws ApiException {
        Object response = api.getAllChats()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Chat History Handler
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHistoryTest() throws ApiException {
        UUID chatId = null;
        List<ChatItem> response = api.getHistory(chatId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Question Handler
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void handleQuestionTest() throws ApiException {
        String question = null;
        UUID chatId = null;
        String model = null;
        Double temperature = null;
        Integer maxTokens = null;
        UUID brainId = null;
        UUID promptId = null;
        UUID brainId = null;
        Object response = api.handleQuestion(question, chatId)
                .model(model)
                .temperature(temperature)
                .maxTokens(maxTokens)
                .brainId(brainId)
                .promptId(promptId)
                .brainId(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Chat Message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMessageTest() throws ApiException {
        Boolean thumbs = null;
        UUID chatId = null;
        UUID messageId = null;
        Object response = api.updateMessage(thumbs, chatId, messageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Chat Metadata Handler
     *
     * Update chat attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMetadataHandlerTest() throws ApiException {
        UUID chatId = null;
        String chatName = null;
        Object response = api.updateMetadataHandler(chatId)
                .chatName(chatName)
                .execute();
        // TODO: test validations
    }

}
