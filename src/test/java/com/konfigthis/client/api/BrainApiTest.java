/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApiBrainDefinitionEntityInputNullable;
import com.konfigthis.client.model.BrainIntegrationSettingsNullable;
import com.konfigthis.client.model.BrainIntegrationUpdateSettingsNullable;
import com.konfigthis.client.model.BrainQuestionRequest;
import com.konfigthis.client.model.BrainSubscriptionUpdatableProperties;
import com.konfigthis.client.model.BrainTypeNullable;
import com.konfigthis.client.model.BrainUpdatableProperties;
import com.konfigthis.client.model.CreateApiBrainDefinitionNullable;
import com.konfigthis.client.model.CreateBrainProperties;
import com.konfigthis.client.model.IntegrationDescriptionEntity;
import com.konfigthis.client.model.PublicBrain;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BrainApi
 */
@Disabled
public class BrainApiTest {

    private static BrainApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BrainApi(apiClient);
    }

    /**
     * Accept Invitation
     *
     * Accept an invitation to a brain for a user. This function removes the invitation from the subscription invitations and adds the user to the brain users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptInvitationTest() throws ApiException {
        UUID brainId = null;
        Object response = api.acceptInvitation(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create New Brain
     *
     * Create a new brain for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewBrainTest() throws ApiException {
        String description = null;
        String name = null;
        String status = null;
        String model = null;
        Double temperature = null;
        Integer maxTokens = null;
        UUID promptId = null;
        BrainTypeNullable brainType = null;
        CreateApiBrainDefinitionNullable brainDefinition = null;
        Object brainSecretsValues = null;
        List<UUID> connectedBrainsIds = null;
        BrainIntegrationSettingsNullable integration = null;
        Object response = api.createNewBrain()
                .description(description)
                .name(name)
                .status(status)
                .model(model)
                .temperature(temperature)
                .maxTokens(maxTokens)
                .promptId(promptId)
                .brainType(brainType)
                .brainDefinition(brainDefinition)
                .brainSecretsValues(brainSecretsValues)
                .connectedBrainsIds(connectedBrainsIds)
                .integration(integration)
                .execute();
        // TODO: test validations
    }

    /**
     * Decline Invitation
     *
     * Decline an invitation to a brain for a user. This function removes the invitation from the subscription invitations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void declineInvitationTest() throws ApiException {
        UUID brainId = null;
        Object response = api.declineInvitation(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve All Brains For User
     *
     * Retrieve all brains for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllForUserTest() throws ApiException {
        Object response = api.getAllForUser()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Public Brains
     *
     * Retrieve all Quivr public brains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPublicTest() throws ApiException {
        List<PublicBrain> response = api.getAllPublic()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Brain By Id
     *
     * Retrieve details of a specific brain by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        UUID brainId = null;
        Object response = api.getById(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Default Brain
     *
     * Retrieve or create the default brain for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultBrainTest() throws ApiException {
        Object response = api.getDefaultBrain()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Integration Brain Description
     *
     * Retrieve the integration brain description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDescriptionTest() throws ApiException {
        List<IntegrationDescriptionEntity> response = api.getDescription()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Question Context For Brain
     *
     * Retrieve the question context from a specific brain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuestionContextTest() throws ApiException {
        String question = null;
        UUID brainId = null;
        Object response = api.getQuestionContext(question, brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Users With Brain Access
     *
     * Get all users for a brain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        UUID brainId = null;
        Object response = api.getUsers(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove User Subscription
     *
     * Remove a user&#39;s subscription to a brain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserSubscriptionTest() throws ApiException {
        UUID brainId = null;
        Object response = api.removeUserSubscription(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set Brain As Default
     *
     * Set a brain as the default for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDefaultTest() throws ApiException {
        UUID brainId = null;
        Object response = api.setDefault(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Existing Brain
     *
     * Update an existing brain&#39;s configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigurationTest() throws ApiException {
        UUID brainId = null;
        String description = null;
        String name = null;
        Double temperature = null;
        String model = null;
        Integer maxTokens = null;
        String status = null;
        UUID promptId = null;
        ApiBrainDefinitionEntityInputNullable brainDefinition = null;
        List<UUID> connectedBrainsIds = null;
        BrainIntegrationUpdateSettingsNullable integration = null;
        Object response = api.updateConfiguration(brainId)
                .description(description)
                .name(name)
                .temperature(temperature)
                .model(model)
                .maxTokens(maxTokens)
                .status(status)
                .promptId(promptId)
                .brainDefinition(brainDefinition)
                .connectedBrainsIds(connectedBrainsIds)
                .integration(integration)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Existing Brain Secrets
     *
     * Update an existing brain&#39;s secrets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSecretsValuesTest() throws ApiException {
        UUID brainId = null;
        Object response = api.updateSecretsValues(brainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Brain Subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        String email = null;
        UUID brainId = null;
        String rights = null;
        Object response = api.updateSubscription(email, brainId)
                .rights(rights)
                .execute();
        // TODO: test validations
    }

}
