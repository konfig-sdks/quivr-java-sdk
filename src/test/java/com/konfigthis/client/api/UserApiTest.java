/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.UserIdentity;
import com.konfigthis.client.model.UserUpdatableProperties;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private static UserApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UserApi(apiClient);
    }

    /**
     * Get User Identity Route
     *
     * Get user identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIdentityRouteTest() throws ApiException {
        UserIdentity response = api.getIdentityRoute()
                .execute();
        // TODO: test validations
    }

    /**
     * Get User Endpoint
     *
     * Get user information and statistics.  - &#x60;current_user&#x60;: The current authenticated user. - Returns the user&#39;s email, maximum brain size, current brain size, maximum requests number, requests statistics, and the current date.  This endpoint retrieves information and statistics about the authenticated user. It includes the user&#39;s email, maximum brain size, current brain size, maximum requests number, requests statistics, and the current date. The brain size is calculated based on the user&#39;s uploaded vectors, and the maximum brain size is obtained from the environment variables. The requests statistics provide information about the user&#39;s API usage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserInformationTest() throws ApiException {
        Object response = api.getUserInformation()
                .execute();
        // TODO: test validations
    }

    /**
     * Update User Identity Route
     *
     * Update user identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIdentityRouteTest() throws ApiException {
        String username = null;
        String company = null;
        Boolean onboarded = null;
        String companySize = null;
        String usagePurpose = null;
        UserIdentity response = api.updateIdentityRoute()
                .username(username)
                .company(company)
                .onboarded(onboarded)
                .companySize(companySize)
                .usagePurpose(usagePurpose)
                .execute();
        // TODO: test validations
    }

}
