/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.IntegrationBrainTag;
import com.konfigthis.client.model.IntegrationType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * IntegrationDescriptionEntity
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IntegrationDescriptionEntity {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<IntegrationBrainTag> tags = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_INTEGRATION_NAME = "integration_name";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_NAME)
  private String integrationName;

  public static final String SERIALIZED_NAME_INTEGRATION_LOGO_URL = "integration_logo_url";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_LOGO_URL)
  private String integrationLogoUrl;

  public static final String SERIALIZED_NAME_CONNECTION_SETTINGS = "connection_settings";
  @SerializedName(SERIALIZED_NAME_CONNECTION_SETTINGS)
  private Object connectionSettings;

  public static final String SERIALIZED_NAME_INTEGRATION_TYPE = "integration_type";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPE)
  private IntegrationType integrationType;

  public static final String SERIALIZED_NAME_INFORMATION = "information";
  @SerializedName(SERIALIZED_NAME_INFORMATION)
  private String information;

  public static final String SERIALIZED_NAME_MAX_FILES = "max_files";
  @SerializedName(SERIALIZED_NAME_MAX_FILES)
  private Integer maxFiles;

  public static final String SERIALIZED_NAME_ALLOW_MODEL_CHANGE = "allow_model_change";
  @SerializedName(SERIALIZED_NAME_ALLOW_MODEL_CHANGE)
  private Boolean allowModelChange;

  public static final String SERIALIZED_NAME_INTEGRATION_DISPLAY_NAME = "integration_display_name";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_DISPLAY_NAME)
  private String integrationDisplayName;

  public IntegrationDescriptionEntity() {
  }

  public IntegrationDescriptionEntity tags(List<IntegrationBrainTag> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public IntegrationDescriptionEntity addTagsItem(IntegrationBrainTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "")

  public List<IntegrationBrainTag> getTags() {
    return tags;
  }


  public void setTags(List<IntegrationBrainTag> tags) {
    
    
    
    this.tags = tags;
  }


  public IntegrationDescriptionEntity description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public IntegrationDescriptionEntity id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public IntegrationDescriptionEntity integrationName(String integrationName) {
    
    
    
    
    this.integrationName = integrationName;
    return this;
  }

   /**
   * Get integrationName
   * @return integrationName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getIntegrationName() {
    return integrationName;
  }


  public void setIntegrationName(String integrationName) {
    
    
    
    this.integrationName = integrationName;
  }


  public IntegrationDescriptionEntity integrationLogoUrl(String integrationLogoUrl) {
    
    
    
    
    this.integrationLogoUrl = integrationLogoUrl;
    return this;
  }

   /**
   * Get integrationLogoUrl
   * @return integrationLogoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIntegrationLogoUrl() {
    return integrationLogoUrl;
  }


  public void setIntegrationLogoUrl(String integrationLogoUrl) {
    
    
    
    this.integrationLogoUrl = integrationLogoUrl;
  }


  public IntegrationDescriptionEntity connectionSettings(Object connectionSettings) {
    
    
    
    
    this.connectionSettings = connectionSettings;
    return this;
  }

   /**
   * Get connectionSettings
   * @return connectionSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getConnectionSettings() {
    return connectionSettings;
  }


  public void setConnectionSettings(Object connectionSettings) {
    
    
    
    this.connectionSettings = connectionSettings;
  }


  public IntegrationDescriptionEntity integrationType(IntegrationType integrationType) {
    
    
    
    
    this.integrationType = integrationType;
    return this;
  }

   /**
   * Get integrationType
   * @return integrationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public IntegrationType getIntegrationType() {
    return integrationType;
  }


  public void setIntegrationType(IntegrationType integrationType) {
    
    
    
    this.integrationType = integrationType;
  }


  public IntegrationDescriptionEntity information(String information) {
    
    
    
    
    this.information = information;
    return this;
  }

   /**
   * Get information
   * @return information
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInformation() {
    return information;
  }


  public void setInformation(String information) {
    
    
    
    this.information = information;
  }


  public IntegrationDescriptionEntity maxFiles(Integer maxFiles) {
    
    
    
    
    this.maxFiles = maxFiles;
    return this;
  }

   /**
   * Get maxFiles
   * @return maxFiles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMaxFiles() {
    return maxFiles;
  }


  public void setMaxFiles(Integer maxFiles) {
    
    
    
    this.maxFiles = maxFiles;
  }


  public IntegrationDescriptionEntity allowModelChange(Boolean allowModelChange) {
    
    
    
    
    this.allowModelChange = allowModelChange;
    return this;
  }

   /**
   * Get allowModelChange
   * @return allowModelChange
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getAllowModelChange() {
    return allowModelChange;
  }


  public void setAllowModelChange(Boolean allowModelChange) {
    
    
    
    this.allowModelChange = allowModelChange;
  }


  public IntegrationDescriptionEntity integrationDisplayName(String integrationDisplayName) {
    
    
    
    
    this.integrationDisplayName = integrationDisplayName;
    return this;
  }

   /**
   * Get integrationDisplayName
   * @return integrationDisplayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getIntegrationDisplayName() {
    return integrationDisplayName;
  }


  public void setIntegrationDisplayName(String integrationDisplayName) {
    
    
    
    this.integrationDisplayName = integrationDisplayName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntegrationDescriptionEntity instance itself
   */
  public IntegrationDescriptionEntity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationDescriptionEntity integrationDescriptionEntity = (IntegrationDescriptionEntity) o;
    return Objects.equals(this.tags, integrationDescriptionEntity.tags) &&
        Objects.equals(this.description, integrationDescriptionEntity.description) &&
        Objects.equals(this.id, integrationDescriptionEntity.id) &&
        Objects.equals(this.integrationName, integrationDescriptionEntity.integrationName) &&
        Objects.equals(this.integrationLogoUrl, integrationDescriptionEntity.integrationLogoUrl) &&
        Objects.equals(this.connectionSettings, integrationDescriptionEntity.connectionSettings) &&
        Objects.equals(this.integrationType, integrationDescriptionEntity.integrationType) &&
        Objects.equals(this.information, integrationDescriptionEntity.information) &&
        Objects.equals(this.maxFiles, integrationDescriptionEntity.maxFiles) &&
        Objects.equals(this.allowModelChange, integrationDescriptionEntity.allowModelChange) &&
        Objects.equals(this.integrationDisplayName, integrationDescriptionEntity.integrationDisplayName)&&
        Objects.equals(this.additionalProperties, integrationDescriptionEntity.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, description, id, integrationName, integrationLogoUrl, connectionSettings, integrationType, information, maxFiles, allowModelChange, integrationDisplayName, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationDescriptionEntity {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    integrationName: ").append(toIndentedString(integrationName)).append("\n");
    sb.append("    integrationLogoUrl: ").append(toIndentedString(integrationLogoUrl)).append("\n");
    sb.append("    connectionSettings: ").append(toIndentedString(connectionSettings)).append("\n");
    sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
    sb.append("    information: ").append(toIndentedString(information)).append("\n");
    sb.append("    maxFiles: ").append(toIndentedString(maxFiles)).append("\n");
    sb.append("    allowModelChange: ").append(toIndentedString(allowModelChange)).append("\n");
    sb.append("    integrationDisplayName: ").append(toIndentedString(integrationDisplayName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("integration_name");
    openapiFields.add("integration_logo_url");
    openapiFields.add("connection_settings");
    openapiFields.add("integration_type");
    openapiFields.add("information");
    openapiFields.add("max_files");
    openapiFields.add("allow_model_change");
    openapiFields.add("integration_display_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("integration_name");
    openapiRequiredFields.add("integration_type");
    openapiRequiredFields.add("max_files");
    openapiRequiredFields.add("allow_model_change");
    openapiRequiredFields.add("integration_display_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegrationDescriptionEntity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IntegrationDescriptionEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationDescriptionEntity is not found in the empty JSON string", IntegrationDescriptionEntity.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegrationDescriptionEntity.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string or null but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("integration_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integration_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integration_name").toString()));
      }
      if (!jsonObj.get("integration_logo_url").isJsonNull() && (jsonObj.get("integration_logo_url") != null && !jsonObj.get("integration_logo_url").isJsonNull()) && !jsonObj.get("integration_logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integration_logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integration_logo_url").toString()));
      }
      if (!jsonObj.get("information").isJsonNull() && (jsonObj.get("information") != null && !jsonObj.get("information").isJsonNull()) && !jsonObj.get("information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("information").toString()));
      }
      if (!jsonObj.get("integration_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integration_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integration_display_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationDescriptionEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationDescriptionEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationDescriptionEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationDescriptionEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationDescriptionEntity>() {
           @Override
           public void write(JsonWriter out, IntegrationDescriptionEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationDescriptionEntity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IntegrationDescriptionEntity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegrationDescriptionEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegrationDescriptionEntity
  * @throws IOException if the JSON string is invalid with respect to IntegrationDescriptionEntity
  */
  public static IntegrationDescriptionEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationDescriptionEntity.class);
  }

 /**
  * Convert an instance of IntegrationDescriptionEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

