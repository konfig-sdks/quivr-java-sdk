/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BrainIntegrationSettingsNullable;
import com.konfigthis.client.model.BrainTypeNullable;
import com.konfigthis.client.model.CreateApiBrainDefinitionNullable;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateBrainProperties
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateBrainProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "This is a description";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "Default brain";

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status = "private";

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Double temperature = 0d;

  public static final String SERIALIZED_NAME_MAX_TOKENS = "max_tokens";
  @SerializedName(SERIALIZED_NAME_MAX_TOKENS)
  private Integer maxTokens = 2000;

  public static final String SERIALIZED_NAME_PROMPT_ID = "prompt_id";
  @SerializedName(SERIALIZED_NAME_PROMPT_ID)
  private UUID promptId;

  public static final String SERIALIZED_NAME_BRAIN_TYPE = "brain_type";
  @SerializedName(SERIALIZED_NAME_BRAIN_TYPE)
  private BrainTypeNullable brainType = BrainTypeNullable.DOC;

  public static final String SERIALIZED_NAME_BRAIN_DEFINITION = "brain_definition";
  @SerializedName(SERIALIZED_NAME_BRAIN_DEFINITION)
  private CreateApiBrainDefinitionNullable brainDefinition;

  public static final String SERIALIZED_NAME_BRAIN_SECRETS_VALUES = "brain_secrets_values";
  @SerializedName(SERIALIZED_NAME_BRAIN_SECRETS_VALUES)
  private Object brainSecretsValues;

  public static final String SERIALIZED_NAME_CONNECTED_BRAINS_IDS = "connected_brains_ids";
  @SerializedName(SERIALIZED_NAME_CONNECTED_BRAINS_IDS)
  private List<UUID> connectedBrainsIds = null;

  public static final String SERIALIZED_NAME_INTEGRATION = "integration";
  @SerializedName(SERIALIZED_NAME_INTEGRATION)
  private BrainIntegrationSettingsNullable integration;

  public CreateBrainProperties() {
  }

  public CreateBrainProperties description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is a description", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CreateBrainProperties name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Default brain", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CreateBrainProperties status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "private", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public CreateBrainProperties model(String model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    
    
    
    this.model = model;
  }


  public CreateBrainProperties temperature(Double temperature) {
    
    
    
    
    this.temperature = temperature;
    return this;
  }

  public CreateBrainProperties temperature(Integer temperature) {
    
    
    
    
    this.temperature = temperature.doubleValue();
    return this;
  }

   /**
   * Get temperature
   * @return temperature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Double getTemperature() {
    return temperature;
  }


  public void setTemperature(Double temperature) {
    
    
    
    this.temperature = temperature;
  }


  public CreateBrainProperties maxTokens(Integer maxTokens) {
    
    
    
    
    this.maxTokens = maxTokens;
    return this;
  }

   /**
   * Get maxTokens
   * @return maxTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2000", value = "")

  public Integer getMaxTokens() {
    return maxTokens;
  }


  public void setMaxTokens(Integer maxTokens) {
    
    
    
    this.maxTokens = maxTokens;
  }


  public CreateBrainProperties promptId(UUID promptId) {
    
    
    
    
    this.promptId = promptId;
    return this;
  }

   /**
   * Get promptId
   * @return promptId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getPromptId() {
    return promptId;
  }


  public void setPromptId(UUID promptId) {
    
    
    
    this.promptId = promptId;
  }


  public CreateBrainProperties brainType(BrainTypeNullable brainType) {
    
    
    
    
    this.brainType = brainType;
    return this;
  }

   /**
   * Get brainType
   * @return brainType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BrainTypeNullable getBrainType() {
    return brainType;
  }


  public void setBrainType(BrainTypeNullable brainType) {
    
    
    
    this.brainType = brainType;
  }


  public CreateBrainProperties brainDefinition(CreateApiBrainDefinitionNullable brainDefinition) {
    
    
    
    
    this.brainDefinition = brainDefinition;
    return this;
  }

   /**
   * Get brainDefinition
   * @return brainDefinition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreateApiBrainDefinitionNullable getBrainDefinition() {
    return brainDefinition;
  }


  public void setBrainDefinition(CreateApiBrainDefinitionNullable brainDefinition) {
    
    
    
    this.brainDefinition = brainDefinition;
  }


  public CreateBrainProperties brainSecretsValues(Object brainSecretsValues) {
    
    
    
    
    this.brainSecretsValues = brainSecretsValues;
    return this;
  }

   /**
   * Get brainSecretsValues
   * @return brainSecretsValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{}", value = "")

  public Object getBrainSecretsValues() {
    return brainSecretsValues;
  }


  public void setBrainSecretsValues(Object brainSecretsValues) {
    
    
    
    this.brainSecretsValues = brainSecretsValues;
  }


  public CreateBrainProperties connectedBrainsIds(List<UUID> connectedBrainsIds) {
    
    
    
    
    this.connectedBrainsIds = connectedBrainsIds;
    return this;
  }

  public CreateBrainProperties addConnectedBrainsIdsItem(UUID connectedBrainsIdsItem) {
    if (this.connectedBrainsIds == null) {
      this.connectedBrainsIds = new ArrayList<>();
    }
    this.connectedBrainsIds.add(connectedBrainsIdsItem);
    return this;
  }

   /**
   * Get connectedBrainsIds
   * @return connectedBrainsIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "")

  public List<UUID> getConnectedBrainsIds() {
    return connectedBrainsIds;
  }


  public void setConnectedBrainsIds(List<UUID> connectedBrainsIds) {
    
    
    
    this.connectedBrainsIds = connectedBrainsIds;
  }


  public CreateBrainProperties integration(BrainIntegrationSettingsNullable integration) {
    
    
    
    
    this.integration = integration;
    return this;
  }

   /**
   * Get integration
   * @return integration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BrainIntegrationSettingsNullable getIntegration() {
    return integration;
  }


  public void setIntegration(BrainIntegrationSettingsNullable integration) {
    
    
    
    this.integration = integration;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateBrainProperties instance itself
   */
  public CreateBrainProperties putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBrainProperties createBrainProperties = (CreateBrainProperties) o;
    return Objects.equals(this.description, createBrainProperties.description) &&
        Objects.equals(this.name, createBrainProperties.name) &&
        Objects.equals(this.status, createBrainProperties.status) &&
        Objects.equals(this.model, createBrainProperties.model) &&
        Objects.equals(this.temperature, createBrainProperties.temperature) &&
        Objects.equals(this.maxTokens, createBrainProperties.maxTokens) &&
        Objects.equals(this.promptId, createBrainProperties.promptId) &&
        Objects.equals(this.brainType, createBrainProperties.brainType) &&
        Objects.equals(this.brainDefinition, createBrainProperties.brainDefinition) &&
        Objects.equals(this.brainSecretsValues, createBrainProperties.brainSecretsValues) &&
        Objects.equals(this.connectedBrainsIds, createBrainProperties.connectedBrainsIds) &&
        Objects.equals(this.integration, createBrainProperties.integration)&&
        Objects.equals(this.additionalProperties, createBrainProperties.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, status, model, temperature, maxTokens, promptId, brainType, brainDefinition, brainSecretsValues, connectedBrainsIds, integration, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBrainProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    promptId: ").append(toIndentedString(promptId)).append("\n");
    sb.append("    brainType: ").append(toIndentedString(brainType)).append("\n");
    sb.append("    brainDefinition: ").append(toIndentedString(brainDefinition)).append("\n");
    sb.append("    brainSecretsValues: ").append(toIndentedString(brainSecretsValues)).append("\n");
    sb.append("    connectedBrainsIds: ").append(toIndentedString(connectedBrainsIds)).append("\n");
    sb.append("    integration: ").append(toIndentedString(integration)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("model");
    openapiFields.add("temperature");
    openapiFields.add("max_tokens");
    openapiFields.add("prompt_id");
    openapiFields.add("brain_type");
    openapiFields.add("brain_definition");
    openapiFields.add("brain_secrets_values");
    openapiFields.add("connected_brains_ids");
    openapiFields.add("integration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateBrainProperties
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateBrainProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBrainProperties is not found in the empty JSON string", CreateBrainProperties.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonNull() && (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("status").isJsonNull() && (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("model").isJsonNull() && (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if (!jsonObj.get("prompt_id").isJsonNull() && (jsonObj.get("prompt_id") != null && !jsonObj.get("prompt_id").isJsonNull()) && !jsonObj.get("prompt_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt_id").toString()));
      }
      // validate the optional field `brain_definition`
      if (jsonObj.get("brain_definition") != null && !jsonObj.get("brain_definition").isJsonNull()) {
        CreateApiBrainDefinitionNullable.validateJsonObject(jsonObj.getAsJsonObject("brain_definition"));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("connected_brains_ids") != null && !jsonObj.get("connected_brains_ids").isJsonNull() && !jsonObj.get("connected_brains_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_brains_ids` to be an array in the JSON string or null but got `%s`", jsonObj.get("connected_brains_ids").toString()));
      }
      // validate the optional field `integration`
      if (jsonObj.get("integration") != null && !jsonObj.get("integration").isJsonNull()) {
        BrainIntegrationSettingsNullable.validateJsonObject(jsonObj.getAsJsonObject("integration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBrainProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBrainProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBrainProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBrainProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBrainProperties>() {
           @Override
           public void write(JsonWriter out, CreateBrainProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBrainProperties read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateBrainProperties instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateBrainProperties given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateBrainProperties
  * @throws IOException if the JSON string is invalid with respect to CreateBrainProperties
  */
  public static CreateBrainProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBrainProperties.class);
  }

 /**
  * Convert an instance of CreateBrainProperties to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

