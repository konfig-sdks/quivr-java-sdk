/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApiBrainDefinitionEntityInputNullable;
import com.konfigthis.client.model.BrainIntegrationSettingsNullable;
import com.konfigthis.client.model.BrainIntegrationUpdateSettingsNullable;
import com.konfigthis.client.model.BrainQuestionRequest;
import com.konfigthis.client.model.BrainSubscriptionUpdatableProperties;
import com.konfigthis.client.model.BrainTypeNullable;
import com.konfigthis.client.model.BrainUpdatableProperties;
import com.konfigthis.client.model.CreateApiBrainDefinitionNullable;
import com.konfigthis.client.model.CreateBrainProperties;
import com.konfigthis.client.model.IntegrationDescriptionEntity;
import com.konfigthis.client.model.PublicBrain;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BrainApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrainApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BrainApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call acceptInvitationCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}/subscription/accept"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptInvitationValidateBeforeCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling acceptInvitation(Async)");
        }

        return acceptInvitationCall(brainId, _callback);

    }


    private ApiResponse<Object> acceptInvitationWithHttpInfo(UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = acceptInvitationValidateBeforeCall(brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call acceptInvitationAsync(UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptInvitationValidateBeforeCall(brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AcceptInvitationRequestBuilder {
        private final UUID brainId;

        private AcceptInvitationRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Build call for acceptInvitation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return acceptInvitationCall(brainId, _callback);
        }


        /**
         * Execute acceptInvitation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = acceptInvitationWithHttpInfo(brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute acceptInvitation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return acceptInvitationWithHttpInfo(brainId);
        }

        /**
         * Execute acceptInvitation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return acceptInvitationAsync(brainId, _callback);
        }
    }

    /**
     * Accept Invitation
     * Accept an invitation to a brain for a user. This function removes the invitation from the subscription invitations and adds the user to the brain users.
     * @param brainId  (required)
     * @return AcceptInvitationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public AcceptInvitationRequestBuilder acceptInvitation(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new AcceptInvitationRequestBuilder(brainId);
    }
    private okhttp3.Call createNewBrainCall(CreateBrainProperties createBrainProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBrainProperties;

        // create path and map variables
        String localVarPath = "/brains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewBrainValidateBeforeCall(CreateBrainProperties createBrainProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createBrainProperties' is set
        if (createBrainProperties == null) {
            throw new ApiException("Missing the required parameter 'createBrainProperties' when calling createNewBrain(Async)");
        }

        return createNewBrainCall(createBrainProperties, _callback);

    }


    private ApiResponse<Object> createNewBrainWithHttpInfo(CreateBrainProperties createBrainProperties) throws ApiException {
        okhttp3.Call localVarCall = createNewBrainValidateBeforeCall(createBrainProperties, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewBrainAsync(CreateBrainProperties createBrainProperties, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewBrainValidateBeforeCall(createBrainProperties, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewBrainRequestBuilder {
        private String description;
        private String name;
        private String status;
        private String model;
        private Double temperature;
        private Integer maxTokens;
        private UUID promptId;
        private BrainTypeNullable brainType;
        private CreateApiBrainDefinitionNullable brainDefinition;
        private Object brainSecretsValues;
        private List<UUID> connectedBrainsIds;
        private BrainIntegrationSettingsNullable integration;

        private CreateNewBrainRequestBuilder() {
        }

        /**
         * Set description
         * @param description  (optional, default to This is a description)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional, default to Default brain)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional, default to private)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set model
         * @param model  (optional)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder model(String model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set temperature
         * @param temperature  (optional, default to 0)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder temperature(Double temperature) {
            this.temperature = temperature;
            return this;
        }
        

        /**
         * Set temperature
         * @param temperature  (optional, default to 0)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder temperature(Integer temperature) {
            this.temperature = temperature.doubleValue();
            return this;
        }
        
        /**
         * Set maxTokens
         * @param maxTokens  (optional, default to 2000)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder maxTokens(Integer maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }
        
        /**
         * Set promptId
         * @param promptId  (optional)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder promptId(UUID promptId) {
            this.promptId = promptId;
            return this;
        }
        
        /**
         * Set brainType
         * @param brainType  (optional, default to doc)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder brainType(BrainTypeNullable brainType) {
            this.brainType = brainType;
            return this;
        }
        
        /**
         * Set brainDefinition
         * @param brainDefinition  (optional)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder brainDefinition(CreateApiBrainDefinitionNullable brainDefinition) {
            this.brainDefinition = brainDefinition;
            return this;
        }
        
        /**
         * Set brainSecretsValues
         * @param brainSecretsValues  (optional)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder brainSecretsValues(Object brainSecretsValues) {
            this.brainSecretsValues = brainSecretsValues;
            return this;
        }
        
        /**
         * Set connectedBrainsIds
         * @param connectedBrainsIds  (optional)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder connectedBrainsIds(List<UUID> connectedBrainsIds) {
            this.connectedBrainsIds = connectedBrainsIds;
            return this;
        }
        
        /**
         * Set integration
         * @param integration  (optional)
         * @return CreateNewBrainRequestBuilder
         */
        public CreateNewBrainRequestBuilder integration(BrainIntegrationSettingsNullable integration) {
            this.integration = integration;
            return this;
        }
        
        /**
         * Build call for createNewBrain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateBrainProperties createBrainProperties = buildBodyParams();
            return createNewBrainCall(createBrainProperties, _callback);
        }

        private CreateBrainProperties buildBodyParams() {
            CreateBrainProperties createBrainProperties = new CreateBrainProperties();
            createBrainProperties.description(this.description);
            createBrainProperties.name(this.name);
            createBrainProperties.status(this.status);
            createBrainProperties.model(this.model);
            createBrainProperties.temperature(this.temperature);
            createBrainProperties.maxTokens(this.maxTokens);
            createBrainProperties.promptId(this.promptId);
            createBrainProperties.brainType(this.brainType);
            createBrainProperties.brainDefinition(this.brainDefinition);
            createBrainProperties.brainSecretsValues(this.brainSecretsValues);
            createBrainProperties.connectedBrainsIds(this.connectedBrainsIds);
            createBrainProperties.integration(this.integration);
            return createBrainProperties;
        }

        /**
         * Execute createNewBrain request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateBrainProperties createBrainProperties = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewBrainWithHttpInfo(createBrainProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewBrain request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateBrainProperties createBrainProperties = buildBodyParams();
            return createNewBrainWithHttpInfo(createBrainProperties);
        }

        /**
         * Execute createNewBrain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateBrainProperties createBrainProperties = buildBodyParams();
            return createNewBrainAsync(createBrainProperties, _callback);
        }
    }

    /**
     * Create New Brain
     * Create a new brain for the user.
     * @param createBrainProperties  (required)
     * @return CreateNewBrainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewBrainRequestBuilder createNewBrain() throws IllegalArgumentException {
        return new CreateNewBrainRequestBuilder();
    }
    private okhttp3.Call declineInvitationCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}/subscription/decline"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call declineInvitationValidateBeforeCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling declineInvitation(Async)");
        }

        return declineInvitationCall(brainId, _callback);

    }


    private ApiResponse<Object> declineInvitationWithHttpInfo(UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = declineInvitationValidateBeforeCall(brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call declineInvitationAsync(UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = declineInvitationValidateBeforeCall(brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeclineInvitationRequestBuilder {
        private final UUID brainId;

        private DeclineInvitationRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Build call for declineInvitation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return declineInvitationCall(brainId, _callback);
        }


        /**
         * Execute declineInvitation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = declineInvitationWithHttpInfo(brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute declineInvitation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return declineInvitationWithHttpInfo(brainId);
        }

        /**
         * Execute declineInvitation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return declineInvitationAsync(brainId, _callback);
        }
    }

    /**
     * Decline Invitation
     * Decline an invitation to a brain for a user. This function removes the invitation from the subscription invitations.
     * @param brainId  (required)
     * @return DeclineInvitationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeclineInvitationRequestBuilder declineInvitation(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new DeclineInvitationRequestBuilder(brainId);
    }
    private okhttp3.Call getAllForUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllForUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllForUserCall(_callback);

    }


    private ApiResponse<Object> getAllForUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllForUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllForUserAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllForUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllForUserRequestBuilder {

        private GetAllForUserRequestBuilder() {
        }

        /**
         * Build call for getAllForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllForUserCall(_callback);
        }


        /**
         * Execute getAllForUser request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAllForUserWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllForUser request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAllForUserWithHttpInfo();
        }

        /**
         * Execute getAllForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAllForUserAsync(_callback);
        }
    }

    /**
     * Retrieve All Brains For User
     * Retrieve all brains for the current user.
     * @return GetAllForUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllForUserRequestBuilder getAllForUser() throws IllegalArgumentException {
        return new GetAllForUserRequestBuilder();
    }
    private okhttp3.Call getAllPublicCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/public";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPublicValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllPublicCall(_callback);

    }


    private ApiResponse<List<PublicBrain>> getAllPublicWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllPublicValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PublicBrain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPublicAsync(final ApiCallback<List<PublicBrain>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPublicValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PublicBrain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPublicRequestBuilder {

        private GetAllPublicRequestBuilder() {
        }

        /**
         * Build call for getAllPublic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPublicCall(_callback);
        }


        /**
         * Execute getAllPublic request
         * @return List&lt;PublicBrain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public List<PublicBrain> execute() throws ApiException {
            ApiResponse<List<PublicBrain>> localVarResp = getAllPublicWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPublic request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PublicBrain&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PublicBrain>> executeWithHttpInfo() throws ApiException {
            return getAllPublicWithHttpInfo();
        }

        /**
         * Execute getAllPublic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PublicBrain>> _callback) throws ApiException {
            return getAllPublicAsync(_callback);
        }
    }

    /**
     * Retrieve Public Brains
     * Retrieve all Quivr public brains.
     * @return GetAllPublicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPublicRequestBuilder getAllPublic() throws IllegalArgumentException {
        return new GetAllPublicRequestBuilder();
    }
    private okhttp3.Call getByIdCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling getById(Async)");
        }

        return getByIdCall(brainId, _callback);

    }


    private ApiResponse<Object> getByIdWithHttpInfo(UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID brainId;

        private GetByIdRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(brainId, _callback);
        }


        /**
         * Execute getById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByIdWithHttpInfo(brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(brainId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByIdAsync(brainId, _callback);
        }
    }

    /**
     * Retrieve Brain By Id
     * Retrieve details of a specific brain by its ID.
     * @param brainId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new GetByIdRequestBuilder(brainId);
    }
    private okhttp3.Call getDefaultBrainCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultBrainValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDefaultBrainCall(_callback);

    }


    private ApiResponse<Object> getDefaultBrainWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDefaultBrainValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultBrainAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultBrainValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultBrainRequestBuilder {

        private GetDefaultBrainRequestBuilder() {
        }

        /**
         * Build call for getDefaultBrain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultBrainCall(_callback);
        }


        /**
         * Execute getDefaultBrain request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getDefaultBrainWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultBrain request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getDefaultBrainWithHttpInfo();
        }

        /**
         * Execute getDefaultBrain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getDefaultBrainAsync(_callback);
        }
    }

    /**
     * Retrieve Default Brain
     * Retrieve or create the default brain for the current user.
     * @return GetDefaultBrainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultBrainRequestBuilder getDefaultBrain() throws IllegalArgumentException {
        return new GetDefaultBrainRequestBuilder();
    }
    private okhttp3.Call getDescriptionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/integrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDescriptionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDescriptionCall(_callback);

    }


    private ApiResponse<List<IntegrationDescriptionEntity>> getDescriptionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDescriptionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<IntegrationDescriptionEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDescriptionAsync(final ApiCallback<List<IntegrationDescriptionEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDescriptionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<IntegrationDescriptionEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDescriptionRequestBuilder {

        private GetDescriptionRequestBuilder() {
        }

        /**
         * Build call for getDescription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDescriptionCall(_callback);
        }


        /**
         * Execute getDescription request
         * @return List&lt;IntegrationDescriptionEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public List<IntegrationDescriptionEntity> execute() throws ApiException {
            ApiResponse<List<IntegrationDescriptionEntity>> localVarResp = getDescriptionWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDescription request with HTTP info returned
         * @return ApiResponse&lt;List&lt;IntegrationDescriptionEntity&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<IntegrationDescriptionEntity>> executeWithHttpInfo() throws ApiException {
            return getDescriptionWithHttpInfo();
        }

        /**
         * Execute getDescription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<IntegrationDescriptionEntity>> _callback) throws ApiException {
            return getDescriptionAsync(_callback);
        }
    }

    /**
     * Get Integration Brain Description
     * Retrieve the integration brain description.
     * @return GetDescriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetDescriptionRequestBuilder getDescription() throws IllegalArgumentException {
        return new GetDescriptionRequestBuilder();
    }
    private okhttp3.Call getQuestionContextCall(UUID brainId, BrainQuestionRequest brainQuestionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = brainQuestionRequest;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}/documents"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuestionContextValidateBeforeCall(UUID brainId, BrainQuestionRequest brainQuestionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling getQuestionContext(Async)");
        }

        // verify the required parameter 'brainQuestionRequest' is set
        if (brainQuestionRequest == null) {
            throw new ApiException("Missing the required parameter 'brainQuestionRequest' when calling getQuestionContext(Async)");
        }

        return getQuestionContextCall(brainId, brainQuestionRequest, _callback);

    }


    private ApiResponse<Object> getQuestionContextWithHttpInfo(UUID brainId, BrainQuestionRequest brainQuestionRequest) throws ApiException {
        okhttp3.Call localVarCall = getQuestionContextValidateBeforeCall(brainId, brainQuestionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getQuestionContextAsync(UUID brainId, BrainQuestionRequest brainQuestionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuestionContextValidateBeforeCall(brainId, brainQuestionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetQuestionContextRequestBuilder {
        private final String question;
        private final UUID brainId;

        private GetQuestionContextRequestBuilder(String question, UUID brainId) {
            this.question = question;
            this.brainId = brainId;
        }

        /**
         * Build call for getQuestionContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BrainQuestionRequest brainQuestionRequest = buildBodyParams();
            return getQuestionContextCall(brainId, brainQuestionRequest, _callback);
        }

        private BrainQuestionRequest buildBodyParams() {
            BrainQuestionRequest brainQuestionRequest = new BrainQuestionRequest();
            brainQuestionRequest.question(this.question);
            return brainQuestionRequest;
        }

        /**
         * Execute getQuestionContext request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BrainQuestionRequest brainQuestionRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = getQuestionContextWithHttpInfo(brainId, brainQuestionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getQuestionContext request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BrainQuestionRequest brainQuestionRequest = buildBodyParams();
            return getQuestionContextWithHttpInfo(brainId, brainQuestionRequest);
        }

        /**
         * Execute getQuestionContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BrainQuestionRequest brainQuestionRequest = buildBodyParams();
            return getQuestionContextAsync(brainId, brainQuestionRequest, _callback);
        }
    }

    /**
     * Get Question Context For Brain
     * Retrieve the question context from a specific brain.
     * @param brainId  (required)
     * @param brainQuestionRequest  (required)
     * @return GetQuestionContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetQuestionContextRequestBuilder getQuestionContext(String question, UUID brainId) throws IllegalArgumentException {
        if (question == null) throw new IllegalArgumentException("\"question\" is required but got null");
            

        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new GetQuestionContextRequestBuilder(question, brainId);
    }
    private okhttp3.Call getUsersCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}/users"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling getUsers(Async)");
        }

        return getUsersCall(brainId, _callback);

    }


    private ApiResponse<Object> getUsersWithHttpInfo(UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUsersAsync(UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUsersRequestBuilder {
        private final UUID brainId;

        private GetUsersRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Build call for getUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUsersCall(brainId, _callback);
        }


        /**
         * Execute getUsers request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUsersWithHttpInfo(brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUsers request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUsersWithHttpInfo(brainId);
        }

        /**
         * Execute getUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUsersAsync(brainId, _callback);
        }
    }

    /**
     * Get Users With Brain Access
     * Get all users for a brain
     * @param brainId  (required)
     * @return GetUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetUsersRequestBuilder getUsers(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new GetUsersRequestBuilder(brainId);
    }
    private okhttp3.Call removeUserSubscriptionCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}/subscription"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserSubscriptionValidateBeforeCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling removeUserSubscription(Async)");
        }

        return removeUserSubscriptionCall(brainId, _callback);

    }


    private ApiResponse<Object> removeUserSubscriptionWithHttpInfo(UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = removeUserSubscriptionValidateBeforeCall(brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUserSubscriptionAsync(UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserSubscriptionValidateBeforeCall(brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUserSubscriptionRequestBuilder {
        private final UUID brainId;

        private RemoveUserSubscriptionRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Build call for removeUserSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserSubscriptionCall(brainId, _callback);
        }


        /**
         * Execute removeUserSubscription request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeUserSubscriptionWithHttpInfo(brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUserSubscription request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeUserSubscriptionWithHttpInfo(brainId);
        }

        /**
         * Execute removeUserSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeUserSubscriptionAsync(brainId, _callback);
        }
    }

    /**
     * Remove User Subscription
     * Remove a user&#39;s subscription to a brain
     * @param brainId  (required)
     * @return RemoveUserSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserSubscriptionRequestBuilder removeUserSubscription(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new RemoveUserSubscriptionRequestBuilder(brainId);
    }
    private okhttp3.Call setDefaultCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}/default"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultValidateBeforeCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling setDefault(Async)");
        }

        return setDefaultCall(brainId, _callback);

    }


    private ApiResponse<Object> setDefaultWithHttpInfo(UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = setDefaultValidateBeforeCall(brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefaultAsync(UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultValidateBeforeCall(brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefaultRequestBuilder {
        private final UUID brainId;

        private SetDefaultRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Build call for setDefault
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setDefaultCall(brainId, _callback);
        }


        /**
         * Execute setDefault request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = setDefaultWithHttpInfo(brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefault request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return setDefaultWithHttpInfo(brainId);
        }

        /**
         * Execute setDefault request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return setDefaultAsync(brainId, _callback);
        }
    }

    /**
     * Set Brain As Default
     * Set a brain as the default for the current user.
     * @param brainId  (required)
     * @return SetDefaultRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public SetDefaultRequestBuilder setDefault(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new SetDefaultRequestBuilder(brainId);
    }
    private okhttp3.Call updateConfigurationCall(UUID brainId, BrainUpdatableProperties brainUpdatableProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = brainUpdatableProperties;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationValidateBeforeCall(UUID brainId, BrainUpdatableProperties brainUpdatableProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling updateConfiguration(Async)");
        }

        // verify the required parameter 'brainUpdatableProperties' is set
        if (brainUpdatableProperties == null) {
            throw new ApiException("Missing the required parameter 'brainUpdatableProperties' when calling updateConfiguration(Async)");
        }

        return updateConfigurationCall(brainId, brainUpdatableProperties, _callback);

    }


    private ApiResponse<Object> updateConfigurationWithHttpInfo(UUID brainId, BrainUpdatableProperties brainUpdatableProperties) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationValidateBeforeCall(brainId, brainUpdatableProperties, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConfigurationAsync(UUID brainId, BrainUpdatableProperties brainUpdatableProperties, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationValidateBeforeCall(brainId, brainUpdatableProperties, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateConfigurationRequestBuilder {
        private final UUID brainId;
        private String description;
        private String name;
        private Double temperature;
        private String model;
        private Integer maxTokens;
        private String status;
        private UUID promptId;
        private ApiBrainDefinitionEntityInputNullable brainDefinition;
        private List<UUID> connectedBrainsIds;
        private BrainIntegrationUpdateSettingsNullable integration;

        private UpdateConfigurationRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set temperature
         * @param temperature  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder temperature(Double temperature) {
            this.temperature = temperature;
            return this;
        }
        

        /**
         * Set temperature
         * @param temperature  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder temperature(Integer temperature) {
            this.temperature = temperature.doubleValue();
            return this;
        }
        
        /**
         * Set model
         * @param model  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder model(String model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set maxTokens
         * @param maxTokens  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder maxTokens(Integer maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set promptId
         * @param promptId  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder promptId(UUID promptId) {
            this.promptId = promptId;
            return this;
        }
        
        /**
         * Set brainDefinition
         * @param brainDefinition  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder brainDefinition(ApiBrainDefinitionEntityInputNullable brainDefinition) {
            this.brainDefinition = brainDefinition;
            return this;
        }
        
        /**
         * Set connectedBrainsIds
         * @param connectedBrainsIds  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder connectedBrainsIds(List<UUID> connectedBrainsIds) {
            this.connectedBrainsIds = connectedBrainsIds;
            return this;
        }
        
        /**
         * Set integration
         * @param integration  (optional)
         * @return UpdateConfigurationRequestBuilder
         */
        public UpdateConfigurationRequestBuilder integration(BrainIntegrationUpdateSettingsNullable integration) {
            this.integration = integration;
            return this;
        }
        
        /**
         * Build call for updateConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BrainUpdatableProperties brainUpdatableProperties = buildBodyParams();
            return updateConfigurationCall(brainId, brainUpdatableProperties, _callback);
        }

        private BrainUpdatableProperties buildBodyParams() {
            BrainUpdatableProperties brainUpdatableProperties = new BrainUpdatableProperties();
            brainUpdatableProperties.description(this.description);
            brainUpdatableProperties.name(this.name);
            brainUpdatableProperties.temperature(this.temperature);
            brainUpdatableProperties.model(this.model);
            brainUpdatableProperties.maxTokens(this.maxTokens);
            brainUpdatableProperties.status(this.status);
            brainUpdatableProperties.promptId(this.promptId);
            brainUpdatableProperties.brainDefinition(this.brainDefinition);
            brainUpdatableProperties.connectedBrainsIds(this.connectedBrainsIds);
            brainUpdatableProperties.integration(this.integration);
            return brainUpdatableProperties;
        }

        /**
         * Execute updateConfiguration request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BrainUpdatableProperties brainUpdatableProperties = buildBodyParams();
            ApiResponse<Object> localVarResp = updateConfigurationWithHttpInfo(brainId, brainUpdatableProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BrainUpdatableProperties brainUpdatableProperties = buildBodyParams();
            return updateConfigurationWithHttpInfo(brainId, brainUpdatableProperties);
        }

        /**
         * Execute updateConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BrainUpdatableProperties brainUpdatableProperties = buildBodyParams();
            return updateConfigurationAsync(brainId, brainUpdatableProperties, _callback);
        }
    }

    /**
     * Update Existing Brain
     * Update an existing brain&#39;s configuration.
     * @param brainId  (required)
     * @param brainUpdatableProperties  (required)
     * @return UpdateConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConfigurationRequestBuilder updateConfiguration(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new UpdateConfigurationRequestBuilder(brainId);
    }
    private okhttp3.Call updateSecretsValuesCall(UUID brainId, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}/secrets-values"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSecretsValuesValidateBeforeCall(UUID brainId, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling updateSecretsValues(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateSecretsValues(Async)");
        }

        return updateSecretsValuesCall(brainId, requestBody, _callback);

    }


    private ApiResponse<Object> updateSecretsValuesWithHttpInfo(UUID brainId, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateSecretsValuesValidateBeforeCall(brainId, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSecretsValuesAsync(UUID brainId, Map<String, String> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSecretsValuesValidateBeforeCall(brainId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSecretsValuesRequestBuilder {
        private final UUID brainId;

        private UpdateSecretsValuesRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Build call for updateSecretsValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, String> requestBody = buildBodyParams();
            return updateSecretsValuesCall(brainId, requestBody, _callback);
        }

        private Map<String, String> buildBodyParams() {
            Map<String, String> requestBody = new HashMap<String, String>();
            return requestBody;
        }

        /**
         * Execute updateSecretsValues request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, String> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSecretsValuesWithHttpInfo(brainId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSecretsValues request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, String> requestBody = buildBodyParams();
            return updateSecretsValuesWithHttpInfo(brainId, requestBody);
        }

        /**
         * Execute updateSecretsValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, String> requestBody = buildBodyParams();
            return updateSecretsValuesAsync(brainId, requestBody, _callback);
        }
    }

    /**
     * Update Existing Brain Secrets
     * Update an existing brain&#39;s secrets.
     * @param brainId  (required)
     * @param requestBody  (required)
     * @return UpdateSecretsValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSecretsValuesRequestBuilder updateSecretsValues(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new UpdateSecretsValuesRequestBuilder(brainId);
    }
    private okhttp3.Call updateSubscriptionCall(UUID brainId, BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = brainSubscriptionUpdatableProperties;

        // create path and map variables
        String localVarPath = "/brains/{brain_id}/subscription"
            .replace("{" + "brain_id" + "}", localVarApiClient.escapeString(brainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(UUID brainId, BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling updateSubscription(Async)");
        }

        // verify the required parameter 'brainSubscriptionUpdatableProperties' is set
        if (brainSubscriptionUpdatableProperties == null) {
            throw new ApiException("Missing the required parameter 'brainSubscriptionUpdatableProperties' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(brainId, brainSubscriptionUpdatableProperties, _callback);

    }


    private ApiResponse<Object> updateSubscriptionWithHttpInfo(UUID brainId, BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(brainId, brainSubscriptionUpdatableProperties, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSubscriptionAsync(UUID brainId, BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(brainId, brainSubscriptionUpdatableProperties, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSubscriptionRequestBuilder {
        private final String email;
        private final UUID brainId;
        private String rights;

        private UpdateSubscriptionRequestBuilder(String email, UUID brainId) {
            this.email = email;
            this.brainId = brainId;
        }

        /**
         * Set rights
         * @param rights  (optional)
         * @return UpdateSubscriptionRequestBuilder
         */
        public UpdateSubscriptionRequestBuilder rights(String rights) {
            this.rights = rights;
            return this;
        }
        
        /**
         * Build call for updateSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties = buildBodyParams();
            return updateSubscriptionCall(brainId, brainSubscriptionUpdatableProperties, _callback);
        }

        private BrainSubscriptionUpdatableProperties buildBodyParams() {
            BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties = new BrainSubscriptionUpdatableProperties();
            brainSubscriptionUpdatableProperties.rights(this.rights);
            brainSubscriptionUpdatableProperties.email(this.email);
            return brainSubscriptionUpdatableProperties;
        }

        /**
         * Execute updateSubscription request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSubscriptionWithHttpInfo(brainId, brainSubscriptionUpdatableProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSubscription request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties = buildBodyParams();
            return updateSubscriptionWithHttpInfo(brainId, brainSubscriptionUpdatableProperties);
        }

        /**
         * Execute updateSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BrainSubscriptionUpdatableProperties brainSubscriptionUpdatableProperties = buildBodyParams();
            return updateSubscriptionAsync(brainId, brainSubscriptionUpdatableProperties, _callback);
        }
    }

    /**
     * Update Brain Subscription
     * 
     * @param brainId  (required)
     * @param brainSubscriptionUpdatableProperties  (required)
     * @return UpdateSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscriptionRequestBuilder updateSubscription(String email, UUID brainId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new UpdateSubscriptionRequestBuilder(email, brainId);
    }
}
