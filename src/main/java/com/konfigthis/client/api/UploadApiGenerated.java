/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BodyUploadFileUploadPost;
import java.io.File;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UploadApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UploadApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UploadApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call filePostCall(UUID brainId, File uploadFile, BodyUploadFileUploadPost bodyUploadFileUploadPost, UUID chatId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyUploadFileUploadPost;

        // create path and map variables
        String localVarPath = "/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uploadFile != null) {
            localVarFormParams.put("uploadFile", uploadFile);
        }

        if (brainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brain_id", brainId));
        }

        if (chatId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chat_id", chatId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filePostValidateBeforeCall(UUID brainId, File uploadFile, BodyUploadFileUploadPost bodyUploadFileUploadPost, UUID chatId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling filePost(Async)");
        }

        // verify the required parameter 'uploadFile' is set
        if (uploadFile == null) {
            throw new ApiException("Missing the required parameter 'uploadFile' when calling filePost(Async)");
        }

        // verify the required parameter 'bodyUploadFileUploadPost' is set
        if (bodyUploadFileUploadPost == null) {
            throw new ApiException("Missing the required parameter 'bodyUploadFileUploadPost' when calling filePost(Async)");
        }

        return filePostCall(brainId, uploadFile, bodyUploadFileUploadPost, chatId, _callback);

    }


    private ApiResponse<Object> filePostWithHttpInfo(UUID brainId, File uploadFile, BodyUploadFileUploadPost bodyUploadFileUploadPost, UUID chatId) throws ApiException {
        okhttp3.Call localVarCall = filePostValidateBeforeCall(brainId, uploadFile, bodyUploadFileUploadPost, chatId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call filePostAsync(UUID brainId, File uploadFile, BodyUploadFileUploadPost bodyUploadFileUploadPost, UUID chatId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = filePostValidateBeforeCall(brainId, uploadFile, bodyUploadFileUploadPost, chatId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FilePostRequestBuilder {
        private final UUID brainId;
        private final File uploadFile;
        private UUID chatId;

        private FilePostRequestBuilder(UUID brainId, File uploadFile) {
            this.brainId = brainId;
            this.uploadFile = uploadFile;
        }

        /**
         * Set chatId
         * @param chatId The ID of the chat (optional)
         * @return FilePostRequestBuilder
         */
        public FilePostRequestBuilder chatId(UUID chatId) {
            this.chatId = chatId;
            return this;
        }
        
        /**
         * Build call for filePost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyUploadFileUploadPost bodyUploadFileUploadPost = buildBodyParams();
            return filePostCall(brainId, uploadFile, bodyUploadFileUploadPost, chatId, _callback);
        }

        private BodyUploadFileUploadPost buildBodyParams() {
            BodyUploadFileUploadPost bodyUploadFileUploadPost = new BodyUploadFileUploadPost();
            bodyUploadFileUploadPost.uploadFile(this.uploadFile);
            return bodyUploadFileUploadPost;
        }

        /**
         * Execute filePost request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BodyUploadFileUploadPost bodyUploadFileUploadPost = buildBodyParams();
            ApiResponse<Object> localVarResp = filePostWithHttpInfo(brainId, uploadFile, bodyUploadFileUploadPost, chatId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute filePost request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BodyUploadFileUploadPost bodyUploadFileUploadPost = buildBodyParams();
            return filePostWithHttpInfo(brainId, uploadFile, bodyUploadFileUploadPost, chatId);
        }

        /**
         * Execute filePost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BodyUploadFileUploadPost bodyUploadFileUploadPost = buildBodyParams();
            return filePostAsync(brainId, uploadFile, bodyUploadFileUploadPost, chatId, _callback);
        }
    }

    /**
     * Upload File
     * 
     * @param brainId The ID of the brain (required)
     * @param uploadFile  (required)
     * @param bodyUploadFileUploadPost  (required)
     * @return FilePostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public FilePostRequestBuilder filePost(UUID brainId, File uploadFile) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        if (uploadFile == null) throw new IllegalArgumentException("\"uploadFile\" is required but got null");
        return new FilePostRequestBuilder(brainId, uploadFile);
    }
}
