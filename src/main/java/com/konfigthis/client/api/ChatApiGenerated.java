/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChatItem;
import com.konfigthis.client.model.ChatMessageProperties;
import com.konfigthis.client.model.ChatNullable;
import com.konfigthis.client.model.ChatQuestion;
import com.konfigthis.client.model.ChatUpdatableProperties;
import com.konfigthis.client.model.CreateChatProperties;
import com.konfigthis.client.model.QuestionAndAnswer;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChatApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChatApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChatApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addQuestionAndAnswerCall(UUID chatId, QuestionAndAnswer questionAndAnswer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = questionAndAnswer;

        // create path and map variables
        String localVarPath = "/chat/{chat_id}/question/answer"
            .replace("{" + "chat_id" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addQuestionAndAnswerValidateBeforeCall(UUID chatId, QuestionAndAnswer questionAndAnswer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling addQuestionAndAnswer(Async)");
        }

        // verify the required parameter 'questionAndAnswer' is set
        if (questionAndAnswer == null) {
            throw new ApiException("Missing the required parameter 'questionAndAnswer' when calling addQuestionAndAnswer(Async)");
        }

        return addQuestionAndAnswerCall(chatId, questionAndAnswer, _callback);

    }


    private ApiResponse<ChatNullable> addQuestionAndAnswerWithHttpInfo(UUID chatId, QuestionAndAnswer questionAndAnswer) throws ApiException {
        okhttp3.Call localVarCall = addQuestionAndAnswerValidateBeforeCall(chatId, questionAndAnswer, null);
        Type localVarReturnType = new TypeToken<ChatNullable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addQuestionAndAnswerAsync(UUID chatId, QuestionAndAnswer questionAndAnswer, final ApiCallback<ChatNullable> _callback) throws ApiException {

        okhttp3.Call localVarCall = addQuestionAndAnswerValidateBeforeCall(chatId, questionAndAnswer, _callback);
        Type localVarReturnType = new TypeToken<ChatNullable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddQuestionAndAnswerRequestBuilder {
        private final String question;
        private final String answer;
        private final UUID chatId;

        private AddQuestionAndAnswerRequestBuilder(String question, String answer, UUID chatId) {
            this.question = question;
            this.answer = answer;
            this.chatId = chatId;
        }

        /**
         * Build call for addQuestionAndAnswer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QuestionAndAnswer questionAndAnswer = buildBodyParams();
            return addQuestionAndAnswerCall(chatId, questionAndAnswer, _callback);
        }

        private QuestionAndAnswer buildBodyParams() {
            QuestionAndAnswer questionAndAnswer = new QuestionAndAnswer();
            questionAndAnswer.question(this.question);
            questionAndAnswer.answer(this.answer);
            return questionAndAnswer;
        }

        /**
         * Execute addQuestionAndAnswer request
         * @return ChatNullable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ChatNullable execute() throws ApiException {
            QuestionAndAnswer questionAndAnswer = buildBodyParams();
            ApiResponse<ChatNullable> localVarResp = addQuestionAndAnswerWithHttpInfo(chatId, questionAndAnswer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addQuestionAndAnswer request with HTTP info returned
         * @return ApiResponse&lt;ChatNullable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChatNullable> executeWithHttpInfo() throws ApiException {
            QuestionAndAnswer questionAndAnswer = buildBodyParams();
            return addQuestionAndAnswerWithHttpInfo(chatId, questionAndAnswer);
        }

        /**
         * Execute addQuestionAndAnswer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChatNullable> _callback) throws ApiException {
            QuestionAndAnswer questionAndAnswer = buildBodyParams();
            return addQuestionAndAnswerAsync(chatId, questionAndAnswer, _callback);
        }
    }

    /**
     * Add Question And Answer Handler
     * Add a new question and anwser to the chat.
     * @param chatId  (required)
     * @param questionAndAnswer  (required)
     * @return AddQuestionAndAnswerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public AddQuestionAndAnswerRequestBuilder addQuestionAndAnswer(String question, String answer, UUID chatId) throws IllegalArgumentException {
        if (question == null) throw new IllegalArgumentException("\"question\" is required but got null");
            

        if (answer == null) throw new IllegalArgumentException("\"answer\" is required but got null");
            

        if (chatId == null) throw new IllegalArgumentException("\"chatId\" is required but got null");
            

        return new AddQuestionAndAnswerRequestBuilder(question, answer, chatId);
    }
    private okhttp3.Call createHandlerCall(CreateChatProperties createChatProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChatProperties;

        // create path and map variables
        String localVarPath = "/chat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHandlerValidateBeforeCall(CreateChatProperties createChatProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createChatProperties' is set
        if (createChatProperties == null) {
            throw new ApiException("Missing the required parameter 'createChatProperties' when calling createHandler(Async)");
        }

        return createHandlerCall(createChatProperties, _callback);

    }


    private ApiResponse<Object> createHandlerWithHttpInfo(CreateChatProperties createChatProperties) throws ApiException {
        okhttp3.Call localVarCall = createHandlerValidateBeforeCall(createChatProperties, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createHandlerAsync(CreateChatProperties createChatProperties, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHandlerValidateBeforeCall(createChatProperties, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateHandlerRequestBuilder {
        private final String name;

        private CreateHandlerRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for createHandler
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChatProperties createChatProperties = buildBodyParams();
            return createHandlerCall(createChatProperties, _callback);
        }

        private CreateChatProperties buildBodyParams() {
            CreateChatProperties createChatProperties = new CreateChatProperties();
            createChatProperties.name(this.name);
            return createChatProperties;
        }

        /**
         * Execute createHandler request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateChatProperties createChatProperties = buildBodyParams();
            ApiResponse<Object> localVarResp = createHandlerWithHttpInfo(createChatProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createHandler request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateChatProperties createChatProperties = buildBodyParams();
            return createHandlerWithHttpInfo(createChatProperties);
        }

        /**
         * Execute createHandler request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateChatProperties createChatProperties = buildBodyParams();
            return createHandlerAsync(createChatProperties, _callback);
        }
    }

    /**
     * Create Chat Handler
     * Create a new chat with initial chat messages.
     * @param createChatProperties  (required)
     * @return CreateHandlerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateHandlerRequestBuilder createHandler(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateHandlerRequestBuilder(name);
    }
    private okhttp3.Call createStreamQuestionHandlerCall(UUID chatId, ChatQuestion chatQuestion, UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatQuestion;

        // create path and map variables
        String localVarPath = "/chat/{chat_id}/question/stream"
            .replace("{" + "chat_id" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (brainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brain_id", brainId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamQuestionHandlerValidateBeforeCall(UUID chatId, ChatQuestion chatQuestion, UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling createStreamQuestionHandler(Async)");
        }

        // verify the required parameter 'chatQuestion' is set
        if (chatQuestion == null) {
            throw new ApiException("Missing the required parameter 'chatQuestion' when calling createStreamQuestionHandler(Async)");
        }

        return createStreamQuestionHandlerCall(chatId, chatQuestion, brainId, _callback);

    }


    private ApiResponse<Object> createStreamQuestionHandlerWithHttpInfo(UUID chatId, ChatQuestion chatQuestion, UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = createStreamQuestionHandlerValidateBeforeCall(chatId, chatQuestion, brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createStreamQuestionHandlerAsync(UUID chatId, ChatQuestion chatQuestion, UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamQuestionHandlerValidateBeforeCall(chatId, chatQuestion, brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateStreamQuestionHandlerRequestBuilder {
        private final String question;
        private final UUID chatId;
        private String model;
        private Double temperature;
        private Integer maxTokens;
        private UUID brainId;
        private UUID promptId;
        private UUID brainId;

        private CreateStreamQuestionHandlerRequestBuilder(String question, UUID chatId) {
            this.question = question;
            this.chatId = chatId;
        }

        /**
         * Set model
         * @param model  (optional)
         * @return CreateStreamQuestionHandlerRequestBuilder
         */
        public CreateStreamQuestionHandlerRequestBuilder model(String model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set temperature
         * @param temperature  (optional)
         * @return CreateStreamQuestionHandlerRequestBuilder
         */
        public CreateStreamQuestionHandlerRequestBuilder temperature(Double temperature) {
            this.temperature = temperature;
            return this;
        }
        

        /**
         * Set temperature
         * @param temperature  (optional)
         * @return CreateStreamQuestionHandlerRequestBuilder
         */
        public CreateStreamQuestionHandlerRequestBuilder temperature(Integer temperature) {
            this.temperature = temperature.doubleValue();
            return this;
        }
        
        /**
         * Set maxTokens
         * @param maxTokens  (optional)
         * @return CreateStreamQuestionHandlerRequestBuilder
         */
        public CreateStreamQuestionHandlerRequestBuilder maxTokens(Integer maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }
        
        /**
         * Set brainId
         * @param brainId  (optional)
         * @return CreateStreamQuestionHandlerRequestBuilder
         */
        public CreateStreamQuestionHandlerRequestBuilder brainId(UUID brainId) {
            this.brainId = brainId;
            return this;
        }
        
        /**
         * Set promptId
         * @param promptId  (optional)
         * @return CreateStreamQuestionHandlerRequestBuilder
         */
        public CreateStreamQuestionHandlerRequestBuilder promptId(UUID promptId) {
            this.promptId = promptId;
            return this;
        }
        
        /**
         * Set brainId
         * @param brainId  (optional)
         * @return CreateStreamQuestionHandlerRequestBuilder
         */
        public CreateStreamQuestionHandlerRequestBuilder brainId(UUID brainId) {
            this.brainId = brainId;
            return this;
        }
        
        /**
         * Build call for createStreamQuestionHandler
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChatQuestion chatQuestion = buildBodyParams();
            return createStreamQuestionHandlerCall(chatId, chatQuestion, brainId, _callback);
        }

        private ChatQuestion buildBodyParams() {
            ChatQuestion chatQuestion = new ChatQuestion();
            chatQuestion.question(this.question);
            chatQuestion.model(this.model);
            chatQuestion.temperature(this.temperature);
            chatQuestion.maxTokens(this.maxTokens);
            chatQuestion.brainId(this.brainId);
            chatQuestion.promptId(this.promptId);
            return chatQuestion;
        }

        /**
         * Execute createStreamQuestionHandler request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ChatQuestion chatQuestion = buildBodyParams();
            ApiResponse<Object> localVarResp = createStreamQuestionHandlerWithHttpInfo(chatId, chatQuestion, brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createStreamQuestionHandler request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ChatQuestion chatQuestion = buildBodyParams();
            return createStreamQuestionHandlerWithHttpInfo(chatId, chatQuestion, brainId);
        }

        /**
         * Execute createStreamQuestionHandler request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ChatQuestion chatQuestion = buildBodyParams();
            return createStreamQuestionHandlerAsync(chatId, chatQuestion, brainId, _callback);
        }
    }

    /**
     * Create Stream Question Handler
     * 
     * @param chatId  (required)
     * @param chatQuestion  (required)
     * @return CreateStreamQuestionHandlerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamQuestionHandlerRequestBuilder createStreamQuestionHandler(String question, UUID chatId) throws IllegalArgumentException {
        if (question == null) throw new IllegalArgumentException("\"question\" is required but got null");
            

        if (chatId == null) throw new IllegalArgumentException("\"chatId\" is required but got null");
            

        return new CreateStreamQuestionHandlerRequestBuilder(question, chatId);
    }
    private okhttp3.Call deleteChatByIdCall(UUID chatId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat/{chat_id}"
            .replace("{" + "chat_id" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChatByIdValidateBeforeCall(UUID chatId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling deleteChatById(Async)");
        }

        return deleteChatByIdCall(chatId, _callback);

    }


    private ApiResponse<Object> deleteChatByIdWithHttpInfo(UUID chatId) throws ApiException {
        okhttp3.Call localVarCall = deleteChatByIdValidateBeforeCall(chatId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteChatByIdAsync(UUID chatId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChatByIdValidateBeforeCall(chatId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteChatByIdRequestBuilder {
        private final UUID chatId;

        private DeleteChatByIdRequestBuilder(UUID chatId) {
            this.chatId = chatId;
        }

        /**
         * Build call for deleteChatById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteChatByIdCall(chatId, _callback);
        }


        /**
         * Execute deleteChatById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteChatByIdWithHttpInfo(chatId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteChatById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteChatByIdWithHttpInfo(chatId);
        }

        /**
         * Execute deleteChatById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteChatByIdAsync(chatId, _callback);
        }
    }

    /**
     * Delete Chat
     * Delete a specific chat by chat ID.
     * @param chatId  (required)
     * @return DeleteChatByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteChatByIdRequestBuilder deleteChatById(UUID chatId) throws IllegalArgumentException {
        if (chatId == null) throw new IllegalArgumentException("\"chatId\" is required but got null");
            

        return new DeleteChatByIdRequestBuilder(chatId);
    }
    private okhttp3.Call getAllChatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllChatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllChatsCall(_callback);

    }


    private ApiResponse<Object> getAllChatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllChatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllChatsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllChatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllChatsRequestBuilder {

        private GetAllChatsRequestBuilder() {
        }

        /**
         * Build call for getAllChats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllChatsCall(_callback);
        }


        /**
         * Execute getAllChats request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAllChatsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllChats request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAllChatsWithHttpInfo();
        }

        /**
         * Execute getAllChats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAllChatsAsync(_callback);
        }
    }

    /**
     * Get Chats
     * Retrieve all chats for the current user.  - &#x60;current_user&#x60;: The current authenticated user. - Returns a list of all chats for the user.  This endpoint retrieves all the chats associated with the current authenticated user. It returns a list of chat objects containing the chat ID and chat name for each chat.
     * @return GetAllChatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllChatsRequestBuilder getAllChats() throws IllegalArgumentException {
        return new GetAllChatsRequestBuilder();
    }
    private okhttp3.Call getHistoryCall(UUID chatId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat/{chat_id}/history"
            .replace("{" + "chat_id" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryValidateBeforeCall(UUID chatId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling getHistory(Async)");
        }

        return getHistoryCall(chatId, _callback);

    }


    private ApiResponse<List<ChatItem>> getHistoryWithHttpInfo(UUID chatId) throws ApiException {
        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(chatId, null);
        Type localVarReturnType = new TypeToken<List<ChatItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHistoryAsync(UUID chatId, final ApiCallback<List<ChatItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(chatId, _callback);
        Type localVarReturnType = new TypeToken<List<ChatItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHistoryRequestBuilder {
        private final UUID chatId;

        private GetHistoryRequestBuilder(UUID chatId) {
            this.chatId = chatId;
        }

        /**
         * Build call for getHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryCall(chatId, _callback);
        }


        /**
         * Execute getHistory request
         * @return List&lt;ChatItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public List<ChatItem> execute() throws ApiException {
            ApiResponse<List<ChatItem>> localVarResp = getHistoryWithHttpInfo(chatId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ChatItem&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ChatItem>> executeWithHttpInfo() throws ApiException {
            return getHistoryWithHttpInfo(chatId);
        }

        /**
         * Execute getHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ChatItem>> _callback) throws ApiException {
            return getHistoryAsync(chatId, _callback);
        }
    }

    /**
     * Get Chat History Handler
     * 
     * @param chatId  (required)
     * @return GetHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoryRequestBuilder getHistory(UUID chatId) throws IllegalArgumentException {
        if (chatId == null) throw new IllegalArgumentException("\"chatId\" is required but got null");
            

        return new GetHistoryRequestBuilder(chatId);
    }
    private okhttp3.Call handleQuestionCall(UUID chatId, ChatQuestion chatQuestion, UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatQuestion;

        // create path and map variables
        String localVarPath = "/chat/{chat_id}/question"
            .replace("{" + "chat_id" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (brainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brain_id", brainId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call handleQuestionValidateBeforeCall(UUID chatId, ChatQuestion chatQuestion, UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling handleQuestion(Async)");
        }

        // verify the required parameter 'chatQuestion' is set
        if (chatQuestion == null) {
            throw new ApiException("Missing the required parameter 'chatQuestion' when calling handleQuestion(Async)");
        }

        return handleQuestionCall(chatId, chatQuestion, brainId, _callback);

    }


    private ApiResponse<Object> handleQuestionWithHttpInfo(UUID chatId, ChatQuestion chatQuestion, UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = handleQuestionValidateBeforeCall(chatId, chatQuestion, brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call handleQuestionAsync(UUID chatId, ChatQuestion chatQuestion, UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = handleQuestionValidateBeforeCall(chatId, chatQuestion, brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class HandleQuestionRequestBuilder {
        private final String question;
        private final UUID chatId;
        private String model;
        private Double temperature;
        private Integer maxTokens;
        private UUID brainId;
        private UUID promptId;
        private UUID brainId;

        private HandleQuestionRequestBuilder(String question, UUID chatId) {
            this.question = question;
            this.chatId = chatId;
        }

        /**
         * Set model
         * @param model  (optional)
         * @return HandleQuestionRequestBuilder
         */
        public HandleQuestionRequestBuilder model(String model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set temperature
         * @param temperature  (optional)
         * @return HandleQuestionRequestBuilder
         */
        public HandleQuestionRequestBuilder temperature(Double temperature) {
            this.temperature = temperature;
            return this;
        }
        

        /**
         * Set temperature
         * @param temperature  (optional)
         * @return HandleQuestionRequestBuilder
         */
        public HandleQuestionRequestBuilder temperature(Integer temperature) {
            this.temperature = temperature.doubleValue();
            return this;
        }
        
        /**
         * Set maxTokens
         * @param maxTokens  (optional)
         * @return HandleQuestionRequestBuilder
         */
        public HandleQuestionRequestBuilder maxTokens(Integer maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }
        
        /**
         * Set brainId
         * @param brainId  (optional)
         * @return HandleQuestionRequestBuilder
         */
        public HandleQuestionRequestBuilder brainId(UUID brainId) {
            this.brainId = brainId;
            return this;
        }
        
        /**
         * Set promptId
         * @param promptId  (optional)
         * @return HandleQuestionRequestBuilder
         */
        public HandleQuestionRequestBuilder promptId(UUID promptId) {
            this.promptId = promptId;
            return this;
        }
        
        /**
         * Set brainId
         * @param brainId  (optional)
         * @return HandleQuestionRequestBuilder
         */
        public HandleQuestionRequestBuilder brainId(UUID brainId) {
            this.brainId = brainId;
            return this;
        }
        
        /**
         * Build call for handleQuestion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChatQuestion chatQuestion = buildBodyParams();
            return handleQuestionCall(chatId, chatQuestion, brainId, _callback);
        }

        private ChatQuestion buildBodyParams() {
            ChatQuestion chatQuestion = new ChatQuestion();
            chatQuestion.question(this.question);
            chatQuestion.model(this.model);
            chatQuestion.temperature(this.temperature);
            chatQuestion.maxTokens(this.maxTokens);
            chatQuestion.brainId(this.brainId);
            chatQuestion.promptId(this.promptId);
            return chatQuestion;
        }

        /**
         * Execute handleQuestion request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ChatQuestion chatQuestion = buildBodyParams();
            ApiResponse<Object> localVarResp = handleQuestionWithHttpInfo(chatId, chatQuestion, brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute handleQuestion request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ChatQuestion chatQuestion = buildBodyParams();
            return handleQuestionWithHttpInfo(chatId, chatQuestion, brainId);
        }

        /**
         * Execute handleQuestion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ChatQuestion chatQuestion = buildBodyParams();
            return handleQuestionAsync(chatId, chatQuestion, brainId, _callback);
        }
    }

    /**
     * Create Question Handler
     * 
     * @param chatId  (required)
     * @param chatQuestion  (required)
     * @return HandleQuestionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public HandleQuestionRequestBuilder handleQuestion(String question, UUID chatId) throws IllegalArgumentException {
        if (question == null) throw new IllegalArgumentException("\"question\" is required but got null");
            

        if (chatId == null) throw new IllegalArgumentException("\"chatId\" is required but got null");
            

        return new HandleQuestionRequestBuilder(question, chatId);
    }
    private okhttp3.Call updateMessageCall(UUID chatId, UUID messageId, ChatMessageProperties chatMessageProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatMessageProperties;

        // create path and map variables
        String localVarPath = "/chat/{chat_id}/{message_id}"
            .replace("{" + "chat_id" + "}", localVarApiClient.escapeString(chatId.toString()))
            .replace("{" + "message_id" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageValidateBeforeCall(UUID chatId, UUID messageId, ChatMessageProperties chatMessageProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling updateMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateMessage(Async)");
        }

        // verify the required parameter 'chatMessageProperties' is set
        if (chatMessageProperties == null) {
            throw new ApiException("Missing the required parameter 'chatMessageProperties' when calling updateMessage(Async)");
        }

        return updateMessageCall(chatId, messageId, chatMessageProperties, _callback);

    }


    private ApiResponse<Object> updateMessageWithHttpInfo(UUID chatId, UUID messageId, ChatMessageProperties chatMessageProperties) throws ApiException {
        okhttp3.Call localVarCall = updateMessageValidateBeforeCall(chatId, messageId, chatMessageProperties, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMessageAsync(UUID chatId, UUID messageId, ChatMessageProperties chatMessageProperties, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageValidateBeforeCall(chatId, messageId, chatMessageProperties, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMessageRequestBuilder {
        private final Boolean thumbs;
        private final UUID chatId;
        private final UUID messageId;

        private UpdateMessageRequestBuilder(Boolean thumbs, UUID chatId, UUID messageId) {
            this.thumbs = thumbs;
            this.chatId = chatId;
            this.messageId = messageId;
        }

        /**
         * Build call for updateMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChatMessageProperties chatMessageProperties = buildBodyParams();
            return updateMessageCall(chatId, messageId, chatMessageProperties, _callback);
        }

        private ChatMessageProperties buildBodyParams() {
            ChatMessageProperties chatMessageProperties = new ChatMessageProperties();
            chatMessageProperties.thumbs(this.thumbs);
            return chatMessageProperties;
        }

        /**
         * Execute updateMessage request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ChatMessageProperties chatMessageProperties = buildBodyParams();
            ApiResponse<Object> localVarResp = updateMessageWithHttpInfo(chatId, messageId, chatMessageProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMessage request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ChatMessageProperties chatMessageProperties = buildBodyParams();
            return updateMessageWithHttpInfo(chatId, messageId, chatMessageProperties);
        }

        /**
         * Execute updateMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ChatMessageProperties chatMessageProperties = buildBodyParams();
            return updateMessageAsync(chatId, messageId, chatMessageProperties, _callback);
        }
    }

    /**
     * Update Chat Message
     * 
     * @param chatId  (required)
     * @param messageId  (required)
     * @param chatMessageProperties  (required)
     * @return UpdateMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMessageRequestBuilder updateMessage(Boolean thumbs, UUID chatId, UUID messageId) throws IllegalArgumentException {
        
        if (chatId == null) throw new IllegalArgumentException("\"chatId\" is required but got null");
            

        if (messageId == null) throw new IllegalArgumentException("\"messageId\" is required but got null");
            

        return new UpdateMessageRequestBuilder(thumbs, chatId, messageId);
    }
    private okhttp3.Call updateMetadataHandlerCall(UUID chatId, ChatUpdatableProperties chatUpdatableProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatUpdatableProperties;

        // create path and map variables
        String localVarPath = "/chat/{chat_id}/metadata"
            .replace("{" + "chat_id" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetadataHandlerValidateBeforeCall(UUID chatId, ChatUpdatableProperties chatUpdatableProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling updateMetadataHandler(Async)");
        }

        // verify the required parameter 'chatUpdatableProperties' is set
        if (chatUpdatableProperties == null) {
            throw new ApiException("Missing the required parameter 'chatUpdatableProperties' when calling updateMetadataHandler(Async)");
        }

        return updateMetadataHandlerCall(chatId, chatUpdatableProperties, _callback);

    }


    private ApiResponse<Object> updateMetadataHandlerWithHttpInfo(UUID chatId, ChatUpdatableProperties chatUpdatableProperties) throws ApiException {
        okhttp3.Call localVarCall = updateMetadataHandlerValidateBeforeCall(chatId, chatUpdatableProperties, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMetadataHandlerAsync(UUID chatId, ChatUpdatableProperties chatUpdatableProperties, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetadataHandlerValidateBeforeCall(chatId, chatUpdatableProperties, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMetadataHandlerRequestBuilder {
        private final UUID chatId;
        private String chatName;

        private UpdateMetadataHandlerRequestBuilder(UUID chatId) {
            this.chatId = chatId;
        }

        /**
         * Set chatName
         * @param chatName  (optional)
         * @return UpdateMetadataHandlerRequestBuilder
         */
        public UpdateMetadataHandlerRequestBuilder chatName(String chatName) {
            this.chatName = chatName;
            return this;
        }
        
        /**
         * Build call for updateMetadataHandler
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChatUpdatableProperties chatUpdatableProperties = buildBodyParams();
            return updateMetadataHandlerCall(chatId, chatUpdatableProperties, _callback);
        }

        private ChatUpdatableProperties buildBodyParams() {
            ChatUpdatableProperties chatUpdatableProperties = new ChatUpdatableProperties();
            chatUpdatableProperties.chatName(this.chatName);
            return chatUpdatableProperties;
        }

        /**
         * Execute updateMetadataHandler request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ChatUpdatableProperties chatUpdatableProperties = buildBodyParams();
            ApiResponse<Object> localVarResp = updateMetadataHandlerWithHttpInfo(chatId, chatUpdatableProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMetadataHandler request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ChatUpdatableProperties chatUpdatableProperties = buildBodyParams();
            return updateMetadataHandlerWithHttpInfo(chatId, chatUpdatableProperties);
        }

        /**
         * Execute updateMetadataHandler request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ChatUpdatableProperties chatUpdatableProperties = buildBodyParams();
            return updateMetadataHandlerAsync(chatId, chatUpdatableProperties, _callback);
        }
    }

    /**
     * Update Chat Metadata Handler
     * Update chat attributes
     * @param chatId  (required)
     * @param chatUpdatableProperties  (required)
     * @return UpdateMetadataHandlerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMetadataHandlerRequestBuilder updateMetadataHandler(UUID chatId) throws IllegalArgumentException {
        if (chatId == null) throw new IllegalArgumentException("\"chatId\" is required but got null");
            

        return new UpdateMetadataHandlerRequestBuilder(chatId);
    }
}
