/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreatePromptProperties;
import com.konfigthis.client.model.Prompt;
import com.konfigthis.client.model.PromptNullable;
import com.konfigthis.client.model.PromptStatusEnum;
import com.konfigthis.client.model.PromptStatusEnumNullable;
import com.konfigthis.client.model.PromptUpdatableProperties;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PromptApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PromptApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PromptApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPromptByIdCall(CreatePromptProperties createPromptProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPromptProperties;

        // create path and map variables
        String localVarPath = "/prompts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPromptByIdValidateBeforeCall(CreatePromptProperties createPromptProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPromptProperties' is set
        if (createPromptProperties == null) {
            throw new ApiException("Missing the required parameter 'createPromptProperties' when calling createPromptById(Async)");
        }

        return createPromptByIdCall(createPromptProperties, _callback);

    }


    private ApiResponse<PromptNullable> createPromptByIdWithHttpInfo(CreatePromptProperties createPromptProperties) throws ApiException {
        okhttp3.Call localVarCall = createPromptByIdValidateBeforeCall(createPromptProperties, null);
        Type localVarReturnType = new TypeToken<PromptNullable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPromptByIdAsync(CreatePromptProperties createPromptProperties, final ApiCallback<PromptNullable> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPromptByIdValidateBeforeCall(createPromptProperties, _callback);
        Type localVarReturnType = new TypeToken<PromptNullable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePromptByIdRequestBuilder {
        private final String title;
        private final String content;
        private PromptStatusEnum status;

        private CreatePromptByIdRequestBuilder(String title, String content) {
            this.title = title;
            this.content = content;
        }

        /**
         * Set status
         * @param status  (optional)
         * @return CreatePromptByIdRequestBuilder
         */
        public CreatePromptByIdRequestBuilder status(PromptStatusEnum status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createPromptById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreatePromptProperties createPromptProperties = buildBodyParams();
            return createPromptByIdCall(createPromptProperties, _callback);
        }

        private CreatePromptProperties buildBodyParams() {
            CreatePromptProperties createPromptProperties = new CreatePromptProperties();
            createPromptProperties.title(this.title);
            createPromptProperties.content(this.content);
            createPromptProperties.status(this.status);
            return createPromptProperties;
        }

        /**
         * Execute createPromptById request
         * @return PromptNullable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public PromptNullable execute() throws ApiException {
            CreatePromptProperties createPromptProperties = buildBodyParams();
            ApiResponse<PromptNullable> localVarResp = createPromptByIdWithHttpInfo(createPromptProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPromptById request with HTTP info returned
         * @return ApiResponse&lt;PromptNullable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PromptNullable> executeWithHttpInfo() throws ApiException {
            CreatePromptProperties createPromptProperties = buildBodyParams();
            return createPromptByIdWithHttpInfo(createPromptProperties);
        }

        /**
         * Execute createPromptById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PromptNullable> _callback) throws ApiException {
            CreatePromptProperties createPromptProperties = buildBodyParams();
            return createPromptByIdAsync(createPromptProperties, _callback);
        }
    }

    /**
     * Create Prompt Route
     * Create a prompt by its id
     * @param createPromptProperties  (required)
     * @return CreatePromptByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreatePromptByIdRequestBuilder createPromptById(String title, String content) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (content == null) throw new IllegalArgumentException("\"content\" is required but got null");
            

        return new CreatePromptByIdRequestBuilder(title, content);
    }
    private okhttp3.Call getAllPublicPromptsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPublicPromptsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllPublicPromptsCall(_callback);

    }


    private ApiResponse<List<Prompt>> getAllPublicPromptsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllPublicPromptsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Prompt>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPublicPromptsAsync(final ApiCallback<List<Prompt>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPublicPromptsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Prompt>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPublicPromptsRequestBuilder {

        private GetAllPublicPromptsRequestBuilder() {
        }

        /**
         * Build call for getAllPublicPrompts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPublicPromptsCall(_callback);
        }


        /**
         * Execute getAllPublicPrompts request
         * @return List&lt;Prompt&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public List<Prompt> execute() throws ApiException {
            ApiResponse<List<Prompt>> localVarResp = getAllPublicPromptsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPublicPrompts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Prompt&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Prompt>> executeWithHttpInfo() throws ApiException {
            return getAllPublicPromptsWithHttpInfo();
        }

        /**
         * Execute getAllPublicPrompts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Prompt>> _callback) throws ApiException {
            return getAllPublicPromptsAsync(_callback);
        }
    }

    /**
     * Get Prompts
     * Retrieve all public prompt
     * @return GetAllPublicPromptsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPublicPromptsRequestBuilder getAllPublicPrompts() throws IllegalArgumentException {
        return new GetAllPublicPromptsRequestBuilder();
    }
    private okhttp3.Call getByIdCall(UUID promptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/{prompt_id}"
            .replace("{" + "prompt_id" + "}", localVarApiClient.escapeString(promptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID promptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptId' is set
        if (promptId == null) {
            throw new ApiException("Missing the required parameter 'promptId' when calling getById(Async)");
        }

        return getByIdCall(promptId, _callback);

    }


    private ApiResponse<PromptNullable> getByIdWithHttpInfo(UUID promptId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(promptId, null);
        Type localVarReturnType = new TypeToken<PromptNullable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID promptId, final ApiCallback<PromptNullable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(promptId, _callback);
        Type localVarReturnType = new TypeToken<PromptNullable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID promptId;

        private GetByIdRequestBuilder(UUID promptId) {
            this.promptId = promptId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(promptId, _callback);
        }


        /**
         * Execute getById request
         * @return PromptNullable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public PromptNullable execute() throws ApiException {
            ApiResponse<PromptNullable> localVarResp = getByIdWithHttpInfo(promptId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;PromptNullable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PromptNullable> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(promptId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PromptNullable> _callback) throws ApiException {
            return getByIdAsync(promptId, _callback);
        }
    }

    /**
     * Get Prompt
     * Retrieve a prompt by its id
     * @param promptId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID promptId) throws IllegalArgumentException {
        if (promptId == null) throw new IllegalArgumentException("\"promptId\" is required but got null");
            

        return new GetByIdRequestBuilder(promptId);
    }
    private okhttp3.Call updateByIdCall(UUID promptId, PromptUpdatableProperties promptUpdatableProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promptUpdatableProperties;

        // create path and map variables
        String localVarPath = "/prompts/{prompt_id}"
            .replace("{" + "prompt_id" + "}", localVarApiClient.escapeString(promptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(UUID promptId, PromptUpdatableProperties promptUpdatableProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptId' is set
        if (promptId == null) {
            throw new ApiException("Missing the required parameter 'promptId' when calling updateById(Async)");
        }

        // verify the required parameter 'promptUpdatableProperties' is set
        if (promptUpdatableProperties == null) {
            throw new ApiException("Missing the required parameter 'promptUpdatableProperties' when calling updateById(Async)");
        }

        return updateByIdCall(promptId, promptUpdatableProperties, _callback);

    }


    private ApiResponse<PromptNullable> updateByIdWithHttpInfo(UUID promptId, PromptUpdatableProperties promptUpdatableProperties) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(promptId, promptUpdatableProperties, null);
        Type localVarReturnType = new TypeToken<PromptNullable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(UUID promptId, PromptUpdatableProperties promptUpdatableProperties, final ApiCallback<PromptNullable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(promptId, promptUpdatableProperties, _callback);
        Type localVarReturnType = new TypeToken<PromptNullable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final UUID promptId;
        private String title;
        private String content;
        private PromptStatusEnumNullable status;

        private UpdateByIdRequestBuilder(UUID promptId) {
            this.promptId = promptId;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set content
         * @param content  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder status(PromptStatusEnumNullable status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PromptUpdatableProperties promptUpdatableProperties = buildBodyParams();
            return updateByIdCall(promptId, promptUpdatableProperties, _callback);
        }

        private PromptUpdatableProperties buildBodyParams() {
            PromptUpdatableProperties promptUpdatableProperties = new PromptUpdatableProperties();
            promptUpdatableProperties.title(this.title);
            promptUpdatableProperties.content(this.content);
            promptUpdatableProperties.status(this.status);
            return promptUpdatableProperties;
        }

        /**
         * Execute updateById request
         * @return PromptNullable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public PromptNullable execute() throws ApiException {
            PromptUpdatableProperties promptUpdatableProperties = buildBodyParams();
            ApiResponse<PromptNullable> localVarResp = updateByIdWithHttpInfo(promptId, promptUpdatableProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;PromptNullable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PromptNullable> executeWithHttpInfo() throws ApiException {
            PromptUpdatableProperties promptUpdatableProperties = buildBodyParams();
            return updateByIdWithHttpInfo(promptId, promptUpdatableProperties);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PromptNullable> _callback) throws ApiException {
            PromptUpdatableProperties promptUpdatableProperties = buildBodyParams();
            return updateByIdAsync(promptId, promptUpdatableProperties, _callback);
        }
    }

    /**
     * Update Prompt
     * Update a prompt by its id
     * @param promptId  (required)
     * @param promptUpdatableProperties  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(UUID promptId) throws IllegalArgumentException {
        if (promptId == null) throw new IllegalArgumentException("\"promptId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(promptId);
    }
}
