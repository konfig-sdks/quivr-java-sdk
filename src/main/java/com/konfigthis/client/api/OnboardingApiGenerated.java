/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnboardingStates;
import com.konfigthis.client.model.OnboardingStatesNullable;
import com.konfigthis.client.model.OnboardingUpdatableProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnboardingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnboardingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnboardingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getUserInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onboarding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserInfoCall(_callback);

    }


    private ApiResponse<OnboardingStatesNullable> getUserInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OnboardingStatesNullable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserInfoAsync(final ApiCallback<OnboardingStatesNullable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OnboardingStatesNullable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserInfoRequestBuilder {

        private GetUserInfoRequestBuilder() {
        }

        /**
         * Build call for getUserInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserInfoCall(_callback);
        }


        /**
         * Execute getUserInfo request
         * @return OnboardingStatesNullable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public OnboardingStatesNullable execute() throws ApiException {
            ApiResponse<OnboardingStatesNullable> localVarResp = getUserInfoWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserInfo request with HTTP info returned
         * @return ApiResponse&lt;OnboardingStatesNullable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnboardingStatesNullable> executeWithHttpInfo() throws ApiException {
            return getUserInfoWithHttpInfo();
        }

        /**
         * Execute getUserInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnboardingStatesNullable> _callback) throws ApiException {
            return getUserInfoAsync(_callback);
        }
    }

    /**
     * Get User Onboarding Handler
     * Get user onboarding information for the current user
     * @return GetUserInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserInfoRequestBuilder getUserInfo() throws IllegalArgumentException {
        return new GetUserInfoRequestBuilder();
    }
    private okhttp3.Call updateUserOnboardingCall(OnboardingUpdatableProperties onboardingUpdatableProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onboardingUpdatableProperties;

        // create path and map variables
        String localVarPath = "/onboarding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserOnboardingValidateBeforeCall(OnboardingUpdatableProperties onboardingUpdatableProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'onboardingUpdatableProperties' is set
        if (onboardingUpdatableProperties == null) {
            throw new ApiException("Missing the required parameter 'onboardingUpdatableProperties' when calling updateUserOnboarding(Async)");
        }

        return updateUserOnboardingCall(onboardingUpdatableProperties, _callback);

    }


    private ApiResponse<OnboardingStates> updateUserOnboardingWithHttpInfo(OnboardingUpdatableProperties onboardingUpdatableProperties) throws ApiException {
        okhttp3.Call localVarCall = updateUserOnboardingValidateBeforeCall(onboardingUpdatableProperties, null);
        Type localVarReturnType = new TypeToken<OnboardingStates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserOnboardingAsync(OnboardingUpdatableProperties onboardingUpdatableProperties, final ApiCallback<OnboardingStates> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserOnboardingValidateBeforeCall(onboardingUpdatableProperties, _callback);
        Type localVarReturnType = new TypeToken<OnboardingStates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserOnboardingRequestBuilder {
        private Boolean onboardingA;
        private Boolean onboardingB1;
        private Boolean onboardingB2;
        private Boolean onboardingB3;

        private UpdateUserOnboardingRequestBuilder() {
        }

        /**
         * Set onboardingA
         * @param onboardingA  (optional)
         * @return UpdateUserOnboardingRequestBuilder
         */
        public UpdateUserOnboardingRequestBuilder onboardingA(Boolean onboardingA) {
            this.onboardingA = onboardingA;
            return this;
        }
        
        /**
         * Set onboardingB1
         * @param onboardingB1  (optional)
         * @return UpdateUserOnboardingRequestBuilder
         */
        public UpdateUserOnboardingRequestBuilder onboardingB1(Boolean onboardingB1) {
            this.onboardingB1 = onboardingB1;
            return this;
        }
        
        /**
         * Set onboardingB2
         * @param onboardingB2  (optional)
         * @return UpdateUserOnboardingRequestBuilder
         */
        public UpdateUserOnboardingRequestBuilder onboardingB2(Boolean onboardingB2) {
            this.onboardingB2 = onboardingB2;
            return this;
        }
        
        /**
         * Set onboardingB3
         * @param onboardingB3  (optional)
         * @return UpdateUserOnboardingRequestBuilder
         */
        public UpdateUserOnboardingRequestBuilder onboardingB3(Boolean onboardingB3) {
            this.onboardingB3 = onboardingB3;
            return this;
        }
        
        /**
         * Build call for updateUserOnboarding
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OnboardingUpdatableProperties onboardingUpdatableProperties = buildBodyParams();
            return updateUserOnboardingCall(onboardingUpdatableProperties, _callback);
        }

        private OnboardingUpdatableProperties buildBodyParams() {
            OnboardingUpdatableProperties onboardingUpdatableProperties = new OnboardingUpdatableProperties();
            onboardingUpdatableProperties.onboardingA(this.onboardingA);
            onboardingUpdatableProperties.onboardingB1(this.onboardingB1);
            onboardingUpdatableProperties.onboardingB2(this.onboardingB2);
            onboardingUpdatableProperties.onboardingB3(this.onboardingB3);
            return onboardingUpdatableProperties;
        }

        /**
         * Execute updateUserOnboarding request
         * @return OnboardingStates
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public OnboardingStates execute() throws ApiException {
            OnboardingUpdatableProperties onboardingUpdatableProperties = buildBodyParams();
            ApiResponse<OnboardingStates> localVarResp = updateUserOnboardingWithHttpInfo(onboardingUpdatableProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserOnboarding request with HTTP info returned
         * @return ApiResponse&lt;OnboardingStates&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnboardingStates> executeWithHttpInfo() throws ApiException {
            OnboardingUpdatableProperties onboardingUpdatableProperties = buildBodyParams();
            return updateUserOnboardingWithHttpInfo(onboardingUpdatableProperties);
        }

        /**
         * Execute updateUserOnboarding request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnboardingStates> _callback) throws ApiException {
            OnboardingUpdatableProperties onboardingUpdatableProperties = buildBodyParams();
            return updateUserOnboardingAsync(onboardingUpdatableProperties, _callback);
        }
    }

    /**
     * Update User Onboarding Handler
     * Update user onboarding information for the current user
     * @param onboardingUpdatableProperties  (required)
     * @return UpdateUserOnboardingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserOnboardingRequestBuilder updateUserOnboarding() throws IllegalArgumentException {
        return new UpdateUserOnboardingRequestBuilder();
    }
}
