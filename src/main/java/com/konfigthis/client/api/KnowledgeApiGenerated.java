/*
 * FastAPI
 * Open-source RAG Framework
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class KnowledgeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KnowledgeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public KnowledgeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteSpecificBrainKnowledgeCall(UUID knowledgeId, UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge/{knowledge_id}"
            .replace("{" + "knowledge_id" + "}", localVarApiClient.escapeString(knowledgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (brainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brain_id", brainId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificBrainKnowledgeValidateBeforeCall(UUID knowledgeId, UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeId' is set
        if (knowledgeId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeId' when calling deleteSpecificBrainKnowledge(Async)");
        }

        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling deleteSpecificBrainKnowledge(Async)");
        }

        return deleteSpecificBrainKnowledgeCall(knowledgeId, brainId, _callback);

    }


    private ApiResponse<Object> deleteSpecificBrainKnowledgeWithHttpInfo(UUID knowledgeId, UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificBrainKnowledgeValidateBeforeCall(knowledgeId, brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSpecificBrainKnowledgeAsync(UUID knowledgeId, UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificBrainKnowledgeValidateBeforeCall(knowledgeId, brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSpecificBrainKnowledgeRequestBuilder {
        private final UUID knowledgeId;
        private final UUID brainId;

        private DeleteSpecificBrainKnowledgeRequestBuilder(UUID knowledgeId, UUID brainId) {
            this.knowledgeId = knowledgeId;
            this.brainId = brainId;
        }

        /**
         * Build call for deleteSpecificBrainKnowledge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpecificBrainKnowledgeCall(knowledgeId, brainId, _callback);
        }


        /**
         * Execute deleteSpecificBrainKnowledge request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteSpecificBrainKnowledgeWithHttpInfo(knowledgeId, brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSpecificBrainKnowledge request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteSpecificBrainKnowledgeWithHttpInfo(knowledgeId, brainId);
        }

        /**
         * Execute deleteSpecificBrainKnowledge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteSpecificBrainKnowledgeAsync(knowledgeId, brainId, _callback);
        }
    }

    /**
     * Delete Endpoint
     * Delete a specific knowledge from a brain.
     * @param knowledgeId  (required)
     * @param brainId  (required)
     * @return DeleteSpecificBrainKnowledgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSpecificBrainKnowledgeRequestBuilder deleteSpecificBrainKnowledge(UUID knowledgeId, UUID brainId) throws IllegalArgumentException {
        if (knowledgeId == null) throw new IllegalArgumentException("\"knowledgeId\" is required but got null");
            

        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new DeleteSpecificBrainKnowledgeRequestBuilder(knowledgeId, brainId);
    }
    private okhttp3.Call generateSignedUrlCall(UUID knowledgeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge/{knowledge_id}/signed_download_url"
            .replace("{" + "knowledge_id" + "}", localVarApiClient.escapeString(knowledgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateSignedUrlValidateBeforeCall(UUID knowledgeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeId' is set
        if (knowledgeId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeId' when calling generateSignedUrl(Async)");
        }

        return generateSignedUrlCall(knowledgeId, _callback);

    }


    private ApiResponse<Object> generateSignedUrlWithHttpInfo(UUID knowledgeId) throws ApiException {
        okhttp3.Call localVarCall = generateSignedUrlValidateBeforeCall(knowledgeId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateSignedUrlAsync(UUID knowledgeId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateSignedUrlValidateBeforeCall(knowledgeId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateSignedUrlRequestBuilder {
        private final UUID knowledgeId;

        private GenerateSignedUrlRequestBuilder(UUID knowledgeId) {
            this.knowledgeId = knowledgeId;
        }

        /**
         * Build call for generateSignedUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateSignedUrlCall(knowledgeId, _callback);
        }


        /**
         * Execute generateSignedUrl request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = generateSignedUrlWithHttpInfo(knowledgeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateSignedUrl request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return generateSignedUrlWithHttpInfo(knowledgeId);
        }

        /**
         * Execute generateSignedUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return generateSignedUrlAsync(knowledgeId, _callback);
        }
    }

    /**
     * Generate Signed Url Endpoint
     * Generate a signed url to download the file from storage.
     * @param knowledgeId  (required)
     * @return GenerateSignedUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GenerateSignedUrlRequestBuilder generateSignedUrl(UUID knowledgeId) throws IllegalArgumentException {
        if (knowledgeId == null) throw new IllegalArgumentException("\"knowledgeId\" is required but got null");
            

        return new GenerateSignedUrlRequestBuilder(knowledgeId);
    }
    private okhttp3.Call getAllKnowledgeCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (brainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brain_id", brainId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllKnowledgeValidateBeforeCall(UUID brainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brainId' is set
        if (brainId == null) {
            throw new ApiException("Missing the required parameter 'brainId' when calling getAllKnowledge(Async)");
        }

        return getAllKnowledgeCall(brainId, _callback);

    }


    private ApiResponse<Object> getAllKnowledgeWithHttpInfo(UUID brainId) throws ApiException {
        okhttp3.Call localVarCall = getAllKnowledgeValidateBeforeCall(brainId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllKnowledgeAsync(UUID brainId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllKnowledgeValidateBeforeCall(brainId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllKnowledgeRequestBuilder {
        private final UUID brainId;

        private GetAllKnowledgeRequestBuilder(UUID brainId) {
            this.brainId = brainId;
        }

        /**
         * Build call for getAllKnowledge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllKnowledgeCall(brainId, _callback);
        }


        /**
         * Execute getAllKnowledge request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAllKnowledgeWithHttpInfo(brainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllKnowledge request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAllKnowledgeWithHttpInfo(brainId);
        }

        /**
         * Execute getAllKnowledge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAllKnowledgeAsync(brainId, _callback);
        }
    }

    /**
     * List Knowledge In Brain Endpoint
     * Retrieve and list all the knowledge in a brain.
     * @param brainId The ID of the brain (required)
     * @return GetAllKnowledgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllKnowledgeRequestBuilder getAllKnowledge(UUID brainId) throws IllegalArgumentException {
        if (brainId == null) throw new IllegalArgumentException("\"brainId\" is required but got null");
            

        return new GetAllKnowledgeRequestBuilder(brainId);
    }
}
